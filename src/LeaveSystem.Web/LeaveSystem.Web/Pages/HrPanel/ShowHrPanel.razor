@page "/hr-panel"
@using LeaveSystem.Shared
@using LeaveSystem.Web.Extensions
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject LeaveTypesService LeaveTypesService
@inject GetLeaveRequestsService GetLeaveRequestsService
@inject UserLeaveLimitsService UserLeaveLimitsService
@inject ILogger<ShowHrPanel> Logger

@if (hrSummary == null || leaveTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <RadzenDataGrid AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" Data="@hrSummary" TItem="HrSummary"
            ColumnWidth="140px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="HrSummary" Property="Employee" Title="Employee" Frozen="true" />
                <RadzenDataGridColumn TItem="HrSummary" Property="SumLimit" Title="Total limit"/>
                <RadzenDataGridColumn TItem="HrSummary" Property="Limit" Title="Limit" />
                <RadzenDataGridColumn TItem="HrSummary" Property="OverdueLimit" Title="Overdue limit" />
                <RadzenDataGridColumn TItem="HrSummary" Property="Left" Title="Limit left" />
                <RadzenDataGridColumn TItem="HrSummary" Property="usedDaysInRow" Title="Used days in a row" />
                <RadzenDataGridColumn TItem="HrSummary" Property="OnDemand" Title="On demand" />
                <RadzenDataGridColumn TItem="HrSummary" Property="Saturdays" Title="Saturdays" />
                @foreach(var leaveType in leaveTypes)
                {
                    <RadzenDataGridColumn TItem="HrSummary" Title="@(leaveType.Name)" Width="80px" TextAlign="TextAlign.Center" >
                        <Template Context="data">
                            @(data.UsedPerLeaveTypes[leaveType.Id])
                        </Template>
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>
    </div>
}
@code {
    private IEnumerable<HrSummary>? hrSummary;
    private IEnumerable<LeaveTypesService.LeaveTypeDto>? leaveTypes;
    private TimeSpan workingHours = TimeSpan.FromHours(8);// TODO get workinghours from api
    private int daysInARow = 14;

    protected override async Task OnInitializedAsync()
    {
        var now = DateTimeOffset.UtcNow;
        var query = new GetLeaveRequestsQuery(now.GetFirstDayOfYear(), now.GetLastDayOfYear(), 1, 1000);
        var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(query);
        var getLeaveTypesTask = LeaveTypesService.GetLeaveTypes();
        var getLimitsTask = UserLeaveLimitsService.GetLimits();
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask, getLimitsTask);
        var leaveRequests = getLeaveRequestsTask.Result?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
        leaveTypes = getLeaveTypesTask.Result ?? Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
        var limits = getLimitsTask.Result ?? Enumerable.Empty<UserLeaveLimitsService.LeaveLimitDto>();
        var users = CreateUserCollection(leaveRequests, limits);
        hrSummary = users.Select(u => HrSummary.Create(u,
            leaveTypes,
            leaveRequests,
            limits,
            workingHours,
            daysInARow
        ));
    }

    private static IEnumerable<FederatedUser> CreateUserCollection(IEnumerable<LeaveRequestShortInfo> leaveRequests, IEnumerable<UserLeaveLimitsService.LeaveLimitDto> limits) =>
        leaveRequests
            .Select(lr => lr.CreatedBy)
            .Union(limits.Select(l => new FederatedUser(l.AssignedToUserEmail, null)))
            .GroupBy(u => u.Email)
            .Select(g => g.First());

    private record class HrSummary(
        string Employee,
        string SumLimit,
        string Limit,
        string OverdueLimit,
        string Left,
        bool usedDaysInRow,
        string OnDemand,
        string Saturdays,
        IDictionary<Guid, string> UsedPerLeaveTypes)
    {
        public static HrSummary Create(
            FederatedUser user,
            IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes,
            IEnumerable<LeaveRequestShortInfo> leaveRequests,
            IEnumerable<UserLeaveLimitsService.LeaveLimitDto> limits,
            TimeSpan workingHours,
            int daysInARow)
        {
            var userLeaveRequests = leaveRequests
                .Where(lr => string.Equals(lr.CreatedBy.Email, user.Email, StringComparison.CurrentCultureIgnoreCase))
                .ToList();
            var userLimits = limits
                .Where(l => string.Equals(l.AssignedToUserEmail, user.Email, StringComparison.CurrentCultureIgnoreCase))
                .ToList();
            var usedPerLeaveTypes = leaveTypes.ToDictionary(
                lt => lt.Id,
                lt => CalculateUsedLimit(lt, userLeaveRequests));
            var holidayLeaveType = GetHolidayLeaveTypeOrDefault(leaveTypes);
            var onDemandLeaveType = GetOnDemandLeaveTypeOrDefault(leaveTypes, holidayLeaveType?.Id);
            var holidayLimit = GetLimitOrDefault(holidayLeaveType?.Id, userLimits);
            var totalLimit = holidayLimit?.TotalLimit.GetReadableTimeSpan(workingHours) ?? "";
            var limit = holidayLimit?.Limit.GetReadableTimeSpan(workingHours) ?? "";
            var overdueLimit = holidayLimit?.OverdueLimit.GetReadableTimeSpan(workingHours) ?? "";
            var holidayUsedLeaveType = CalculateLimitLeft(holidayLimit, onDemandLeaveType, usedPerLeaveTypes, workingHours);
            var usedDaysInARow = holidayLeaveType == null ? false : CalculateDaysInARow(
                userLeaveRequests,
                holidayLeaveType.Id,
                daysInARow);
            var onDemandDescription = onDemandLeaveType == null ? "" :
                CalculateOnDemand(onDemandLeaveType.Id, userLeaveRequests, userLimits, workingHours);
            var usedPerLeaveTypesReadable = usedPerLeaveTypes.ToDictionary(
                lt => lt.Key,
                lt => lt.Value.GetReadableTimeSpan(workingHours));
            return new HrSummary(
                user.Name ?? user.Email,
                totalLimit,
                limit,
                overdueLimit,
                holidayUsedLeaveType,
                usedDaysInARow,
                onDemandDescription,
                "",
                usedPerLeaveTypesReadable
            );
        }
    };

    private static string CalculateLimitLeft(
        UserLeaveLimitsService.LeaveLimitDto? holidayLimit,
        LeaveTypesService.LeaveTypeDto? onDemandLeaveType,
        IDictionary<Guid, TimeSpan> usedPerLeaveTypes,
        TimeSpan workingHours)
    {
        if(holidayLimit == null)
        {
            return "";
        }
        usedPerLeaveTypes.TryGetValue(holidayLimit.LeaveTypeId, out TimeSpan usedHoliday);
        usedPerLeaveTypes.TryGetValue(onDemandLeaveType?.Id ?? Guid.Empty, out TimeSpan usedOnDemand);
        var left = holidayLimit.TotalLimit - usedHoliday - usedOnDemand;
        return left.GetReadableTimeSpan(workingHours);
    }

    private static LeaveTypesService.LeaveTypeDto? GetOnDemandLeaveTypeOrDefault(
        IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypess,
        Guid? defaultLeaveTypeId)
    {
        return defaultLeaveTypeId == null ? null : leaveTypess.FirstOrDefault(lt => lt.BaseLeaveTypeId == defaultLeaveTypeId);
    }

    private static string CalculateOnDemand(
        Guid onDemandLeaveTypeId,
        IEnumerable<LeaveRequestShortInfo> leaveRequests,
        IEnumerable<UserLeaveLimitsService.LeaveLimitDto> limits,
        TimeSpan workingHours)
    {
        var onDemandLeaveRequestsDuration = TimeSpan.FromTicks(leaveRequests
            .Where(lr => lr.LeaveTypeId == onDemandLeaveTypeId)
            .Sum(lr => lr.Duration.Ticks));
        var onDemandTotalLimit = limits
            .FirstOrDefault(l => l.LeaveTypeId == onDemandLeaveTypeId)?.TotalLimit;
        var onDemandLeaveRequestsDurationReadable = onDemandLeaveRequestsDuration == TimeSpan.Zero ? "0d" : onDemandLeaveRequestsDuration.GetReadableTimeSpan(workingHours);
        var onDemandTotalLimitReadable = onDemandTotalLimit?.GetReadableTimeSpan(workingHours) ?? "0d";
        return $"{onDemandLeaveRequestsDurationReadable} / {onDemandTotalLimitReadable}";
    }

    private static bool CalculateDaysInARow(
        IEnumerable<LeaveRequestShortInfo> leaveRequests,
        Guid leaveTypeId,
        int daysInARow)
    {
        return leaveRequests.Any(lr =>
            lr.LeaveTypeId == leaveTypeId &&
            DateCalculator.CalculateDurationIncludeFreeDays(lr.DateFrom.GetDayWithoutTime(), lr.DateTo.GetDayWithoutTime()) >= daysInARow
        );
    }

    private static UserLeaveLimitsService.LeaveLimitDto? GetLimitOrDefault(
        Guid? leaveTypeId,
        IEnumerable<UserLeaveLimitsService.LeaveLimitDto> limits)
    {
        return leaveTypeId == null ? null :
            limits.FirstOrDefault(l => l.LeaveTypeId == leaveTypeId.Value);
    }

    private static LeaveTypesService.LeaveTypeDto? GetHolidayLeaveTypeOrDefault(
        IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes)
    {
        return leaveTypes.FirstOrDefault(lt => lt.Properties.IsDefault == true);
    }

    private static TimeSpan CalculateUsedLimit(
        LeaveTypesService.LeaveTypeDto leaveType,
        IEnumerable<LeaveRequestShortInfo> leaveRequests)
    {
        var leaveRequestsPerLeaveType = leaveRequests
            .Where(lr => lr.LeaveTypeId == leaveType.Id);
        return TimeSpan.FromTicks(leaveRequestsPerLeaveType.Sum(lr => lr.Duration.Ticks));
    }
}
