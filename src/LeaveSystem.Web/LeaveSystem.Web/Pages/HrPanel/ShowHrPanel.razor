@page "/hr-panel/{year:int?}"
@using LeaveSystem.Shared
@using LeaveSystem.Web.Extensions
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using LeaveSystem.Web.Pages.UserPanel;
@using LeaveSystem.Web.Pages.WorkingHours
@using Microsoft.AspNetCore.Authorization
@using static LeaveSystem.Web.Pages.LeaveTypes.LeaveTypesService;
@using static LeaveSystem.Web.Pages.HrPanel.LeaveRequestSummaryService;

@attribute [Authorize(Policy=@PolicyName)]
@inject ILogger<ShowHrPanel> Logger
@inject LeaveRequestSummaryService LeaveRequestSummaryService
@inject NavigationManager NavManager

<PageTitle>HR panel @Year</PageTitle>

@if (summary == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" Gap="3rem" Class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H5">Data for year </RadzenText>
        <RadzenNumeric TValue="int?" Value=@Year Change=@(args => YearChanged(args)) />
    </RadzenStack>
    <div class="container-flex">
        <RadzenDataGrid AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" Data="@summary.Items" TItem="UserLeaveRequestSummary"
            ColumnWidth="140px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Property="Employee" Title="Employee" Frozen="true">
                    <Template Context="data">
                        <RadzenLink Path=@String.Format("user-panel/{0}", data.Employee.Id) Text=@data.Employee.Name />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Title="Limit">
                    <Template Context="data">
                        @(data.Summary.FirstOrDefault(s => s.LeaveTypeProperties.Catalog == LeaveTypeCatalog.Holiday)?.Limit)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Title="Overdue limit">
                    <Template Context="data">
                        @(data.Summary.FirstOrDefault(s => s.LeaveTypeProperties.Catalog == LeaveTypeCatalog.Holiday)?.OverdueLimit)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Title="Limit left">
                    <Template Context="data">
                        @(data.Summary.FirstOrDefault(s => s.LeaveTypeProperties.Catalog == LeaveTypeCatalog.Holiday)?.Left)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Title="Used days in a row">
                    <Template Context="data">
                        <RadzenCheckBox ReadOnly=true Value="@(CalculateDaysInARow(data.Summary))" />
                    </Template>
                </RadzenDataGridColumn>
                @foreach (var leaveType in summary.LeaveTypes)
                {
                    <RadzenDataGridColumn TItem="UserLeaveRequestSummary" Title="@(leaveType.Name)" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @(GetUsedLeft(data.Summary.FirstOrDefault(s => s.LeaveTypeId == leaveType.Id)))
                        </Template>
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>
    </div>
}
@code {
    [Parameter]
    public int? Year { get; set; }
    public const string PolicyName = "ShowHrPanel";
    private LeaveRequestSummary? summary;
    private int daysInARow = 14; // TODO get from config
    private LeaveTypeDto? holidayLeaveType;

    protected override async Task OnInitializedAsync()
    {
        if (Year is null)
        {
            Year = DateTimeOffset.UtcNow.Year;
        }
        summary = await LeaveRequestSummaryService.Summary(Year.Value);
        holidayLeaveType = summary.LeaveTypes.FirstOrDefault(lt => lt.Properties.Catalog == LeaveTypeCatalog.Holiday);
    }

    private static string? GetUsedLeft(LeaveRequestPerType? leaveRequestPerType) =>
        leaveRequestPerType?.SumLimit is null ? leaveRequestPerType?.Used : $"{leaveRequestPerType.Used}/{leaveRequestPerType.SumLimit}";

    private bool CalculateDaysInARow(
        IEnumerable<LeaveRequestPerType> leaveRequestPerTypes)
    {
        if (holidayLeaveType is null)
        {
            return false;
        }
        return leaveRequestPerTypes.Any(lrt =>
            lrt.LeaveTypeId == holidayLeaveType.Id &&
            lrt.LeaveRequests.Any(lr => DateCalculator.CalculateDurationIncludeFreeDays(lr.DateFrom.GetDayWithoutTime(), lr.DateTo.GetDayWithoutTime()) >= daysInARow) // TODO: calculate when leave requests are next to each other and could be on demand as well.
        );
    }

    private async Task<int?> YearChanged(int? year)
    {
        Year = year;
        NavManager.NavigateTo($"/hr-panel/{year}");
        await OnInitializedAsync();
        return year;
    }
}
