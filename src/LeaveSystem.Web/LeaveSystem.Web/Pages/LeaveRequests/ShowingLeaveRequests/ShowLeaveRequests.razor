@page "/leave-requests"
@using LeaveSystem.Shared.LeaveRequests
@using LeaveSystem.Shared
@using LeaveSystem.Web.Components
@using LeaveSystem.Web.Pages.LeaveTypes
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json.Serialization
@using System.Text.Json
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<ShowLeaveRequests> Logger
@inject TimelineComponent Timeline
@inject LeaveTypesService LeaveTypeService
@inject GetLeaveRequestsService GetLeaveRequestsService

<PageTitle>Show leave request</PageTitle>

<h1>Show leave request</h1>

@if (leaveRequests == null || employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@leaveRequestsQuery" OnValidSubmit="@HandleFilter">
        <FluentValidationValidator />
        <ValidationSummary />

        <RadzenCard class="mb-3 row">
            <div class="col-md-6">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date from:</RadzenText>
                <RadzenDatePicker @bind-Value=@leaveRequestsQuery.DateFrom DateFormat="d" Class="w-100" />
            </div>
            <div class="col-md-6">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date to:</RadzenText>
                <RadzenDatePicker @bind-Value=@leaveRequestsQuery.DateTo DateFormat="d" Class="w-100" />
            </div>
            <div class="col-md-12">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Class="mb-0">Advanced filtering</RadzenText>
                <RadzenSwitch @bind-Value=@advancedFilteringEnabled Class="mb-3" />
            </div>
            @if (advancedFilteringEnabled)
            {
                <div class="col-md-6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose leave types</RadzenText>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@leaveRequestsQuery.LeaveTypeIds Multiple="true" Placeholder="Select..." Data=@leaveTypes TextProperty="Name" ValueProperty="Id"
                            Class="w-100" />
                </div>
                <div class="col-md-6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose leave statuses</RadzenText>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@leaveRequestsQuery.Statuses Multiple="true" Placeholder="Select..." Data=@leaveRequestStatuses
                            TextProperty="Value" ValueProperty="Key" Class="w-100" />
                </div>
            }
            <RadzenButton  type="submit" Text="Filter"></RadzenButton>
        </RadzenCard>
    </EditForm>
}

<div id="timeline-visualization"></div>


@code {
    private GetLeaveRequestsQuery leaveRequestsQuery = GetLeaveRequestsQuery.GetDefault();
    private EditContext? editContext;
    private PagedListResponse<LeaveRequestShortInfo>? leaveRequests;
    private FederatedUser[]? employees = null;
    private IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
    private IEnumerable<KeyValuePair<LeaveRequestStatus, string>> leaveRequestStatuses = Enum.GetValues<LeaveRequestStatus>()
        .Select(s => new KeyValuePair<LeaveRequestStatus, string>(s, s.ToString()));
    private bool advancedFilteringEnabled;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        editContext = new(leaveRequestsQuery);
    }
    private async Task GetData()
    {
        var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(leaveRequestsQuery);
        var getLeaveTypesTask = LeaveTypeService.GetLeaveTypes();
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask);
        leaveRequests = getLeaveRequestsTask.Result;
        leaveTypes = getLeaveTypesTask.Result;
        employees = leaveRequests?.Items?.Select(l => l.CreatedBy)
            .GroupBy(u => u.Email)
            .Select(u => u.First())
            .OrderBy(u => u.Email).ToArray();
        await Timeline.CreateAsync("timeline-visualization", employees, leaveRequests?.Items, leaveRequestsQuery.DateFrom, leaveRequestsQuery.DateTo.AddDays(1));
    }
    private async Task HandleFilter()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("[HandleSubmit]: Form is valid");
            try
            {
                await GetData();
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, "AccessTokenNotAvailableException");
                exception.Redirect();
            }
        }
        else
        {
            Logger.LogTrace("[HandleSubmit]: Form is INVALID");
        }
    }
}
