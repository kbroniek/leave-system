@page "/showleaverequests"
@using LeaveSystem.Db
@using LeaveSystem.EventSourcing.LeaveRequests
@using LeaveSystem.Web.Components
@using LeaveSystem.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json.Serialization
@using System.Text.Json
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<ShowLeaveRequest> Logger
@inject TimelineComponent Timeline
@inject LeaveTypeService LeaveTypeService

<PageTitle>Show leave request</PageTitle>

<h1>Show leave request</h1>

@if (leaveRequests == null || users == null)
{
    <p><em>Loading...</em></p>
}
<div id="timeline-visualization"></div>

@code {
    private PagedListResponse<LeaveRequestShortInfo>? leaveRequests;
    private FederatedUser[]? users = null;
    private IEnumerable<LeaveTypeService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypeService.LeaveTypeDto>();

    protected override async Task OnInitializedAsync()
    {
        var getLeaveRequestsTask = Http.GetFromJsonAsync<PagedListResponse<LeaveRequestShortInfo>>("api/leaveRequests", new JsonSerializerOptions(JsonSerializerDefaults.Web));
        var getLeaveTypesTask = LeaveTypeService.GetLeaveTypes();
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask);
        leaveRequests = getLeaveRequestsTask.Result;
        leaveTypes = getLeaveTypesTask.Result;
        users = leaveRequests?.Items?.Where(l => l.CreatedBy != null).Select(l => l.CreatedBy!.Value).Distinct().OrderBy(u => u.Email).ToArray();
        var now = DateTimeOffset.UtcNow;
        await Timeline.CreateAsync("timeline-visualization", users, leaveRequests?.Items, now.AddDays(-14), now.AddDays(14));
    }

    public record class LeaveRequestShortInfo(
        Guid Id,
        DateTimeOffset DateFrom,
        DateTimeOffset DateTo,
        TimeSpan Duration,
        Guid LeaveTypeId,
        LeaveRequestStatus Status,
        FederatedUser? CreatedBy
    );
}
