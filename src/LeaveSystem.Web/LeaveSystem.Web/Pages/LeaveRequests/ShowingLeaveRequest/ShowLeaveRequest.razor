@page "/showleaverequests"
@using LeaveSystem.Db
@using LeaveSystem.EventSourcing.LeaveRequests
@using LeaveSystem.Web.Components
@using LeaveSystem.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json.Serialization
@using System.Text.Json
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<ShowLeaveRequest> Logger
@inject TimelineComponent Timeline
@inject LeaveTypeService LeaveTypeService

<PageTitle>Show leave request</PageTitle>

<h1>Show leave request</h1>

@if (leaveRequests == null || users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="timeline-panel">
        <div class="timeline-users">
            @foreach (var user in users)
            {
                <div class="timeline-user">@user.Name</div>
            }
        </div>
        <div class="timeline-body">
            @foreach (var user in users)
            {
                // for each given day and user check the leave request and put it an item https://code.tutsplus.com/articles/best-free-open-source-javascript-timelines--cms-39673
                <div class="timeline-item"></div>
            }
        </div>
    </div>
    @*<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leaveRequest in leaveRequests)
            {
                <tr>
                    <td>@leaveRequest.DateFrom</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@
}
<div id="timeline-visualization"></div>

@code {
    private PagedListResponse<LeaveRequestShortInfo>? leaveRequests;
    private FederatedUser[]? users = null;
    private IEnumerable<LeaveTypeService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypeService.LeaveTypeDto>();

    protected override async Task OnInitializedAsync()
    {
        var getLeaveRequestsTask = Http.GetFromJsonAsync<PagedListResponse<LeaveRequestShortInfo>>("api/leaveRequests", new JsonSerializerOptions(JsonSerializerDefaults.Web));
        var getLeaveTypesTask = LeaveTypeService.GetLeaveTypes();
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask);
        leaveRequests = getLeaveRequestsTask.Result;
        leaveTypes = getLeaveTypesTask.Result;
        users = leaveRequests?.Items?.Where(l => l.CreatedBy != null).Select(l => l.CreatedBy!.Value).Distinct().OrderBy(u => u.Email).ToArray();
        await Timeline.CreateAsync("timeline-visualization", users, leaveRequests?.Items);
    }

    public record class LeaveRequestShortInfo(
        Guid Id,
        DateTimeOffset DateFrom,
        DateTimeOffset DateTo,
        TimeSpan Duration,
        Guid LeaveTypeId,
        LeaveRequestStatus Status,
        FederatedUser? CreatedBy
    );
}
