@page "/showleaverequests"
@using LeaveSystem.Db
@using LeaveSystem.EventSourcing.LeaveRequests
@using LeaveSystem.Web.Components
@using LeaveSystem.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json.Serialization
@using System.Text.Json
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<ShowLeaveRequest> Logger
@inject TimelineComponent Timeline
@inject LeaveTypeService LeaveTypeService

<PageTitle>Show leave request</PageTitle>

<h1>Show leave request</h1>

@if (leaveRequests == null || users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@leaveRequestsQuery" OnValidSubmit="@HandleFilter">
        <FluentValidationValidator />
        <ValidationSummary />

        <p>
            <label>
                Date from:
                <InputDate @bind-Value="leaveRequestsQuery.DateFrom" />
            </label>
        </p>
        <p>
            <label>
                Date from:
                <InputDate @bind-Value="leaveRequestsQuery.DateTo" />
            </label>
        </p>
        <p>
            <label>
                Hours:
                @*<InputText @bind-Value="leaveRequest.Hours" />*@
                <InputText type="time" @bind-Value="TimeProxy" />
            </label>
        </p>
        <p>
            <label>
                Leave type:
                <InputSelect @bind-Value="leaveRequest.LeaveTypeId" >
                    <option value="">Select leave type ...</option>
                    @foreach (var leaveType in leaveTypes)
                    {
                        <option value="@leaveType.Id">@leaveType.Name</option>
                    }
                </InputSelect>
            </label>
        </p>
        <p>
            <label>
                Remarks (optional):
                <InputTextArea @bind-Value="leaveRequest.Remarks" />
            </label>
        </p>

        <button type="submit">Submit</button>
    </EditForm>
}
<div id="timeline-visualization"></div>

@code {
    private GetLeaveRequestsQuery leaveRequestsQuery = new();
    private EditContext? editContext;
    private PagedListResponse<LeaveRequestShortInfo>? leaveRequests;
    private FederatedUser[]? users = null;
    private IEnumerable<LeaveTypeService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypeService.LeaveTypeDto>();

    protected override async Task OnInitializedAsync()
    {
        await GetLeaveRequests();
        editContext = new(leaveRequestsQuery);
    }
    private async Task GetLeaveRequests()
    {
        var getLeaveRequestsTask = Http.GetFromJsonAsync<PagedListResponse<LeaveRequestShortInfo>>("api/leaveRequests", new JsonSerializerOptions(JsonSerializerDefaults.Web));
        var getLeaveTypesTask = LeaveTypeService.GetLeaveTypes();
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask);
        leaveRequests = getLeaveRequestsTask.Result;
        leaveTypes = getLeaveTypesTask.Result;
        users = leaveRequests?.Items?.Where(l => l.CreatedBy != null).Select(l => l.CreatedBy!.Value).Distinct().OrderBy(u => u.Email).ToArray();
        await Timeline.CreateAsync("timeline-visualization", users, leaveRequests?.Items, leaveRequestsQuery.DateFrom, leaveRequestsQuery.DateTo);
    }
    private async Task HandleFilter()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("[HandleSubmit]: Form is valid");
            try
            {
                await GetLeaveRequests();
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, "AccessTokenNotAvailableException");
                exception.Redirect();
            }
        }
        else
        {
            Logger.LogTrace("[HandleSubmit]: Form is INVALID");
        }
    }
}
