@page "/create-leave-request"
@using LeaveSystem.Web.Pages.LeaveTypes
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LeaveSystem.Web.Pages.WorkingHours
@using LeaveSystem.Web.Extensions
@using LeaveSystem.Shared
@using Microsoft.AspNetCore.Components.Authorization;
@using LeaveSystem.Shared.WorkingHours
@attribute [Authorize]
@inject HttpClient Http
@inject LeaveTypesService LeaveTypesService
@inject WorkingHoursService WorkingHoursService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CreateLeaveRequest> Logger

<PageTitle>Add leave request</PageTitle>

<div class="container-fluid">
    <h1>Add leave request</h1>
    <RadzenTemplateForm TItem="CreateLeaveRequestDto" Data=@leaveRequest Submit=@HandleSubmit>
        <div class="row">
            <div class="col-xl-4">
            <RadzenCard>
                <div class="row">
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Date from:</RadzenText>
                        <RadzenDatePicker Name="DateFrom" @bind-Value=@leaveRequest.DateFrom DateFormat="d" Class="w-100" />
                        <RadzenRequiredValidator Component="DateFrom" Text="Put date from" Style="position: initial" Popup="true" />
                    </div>
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Date to:</RadzenText>
                        <RadzenDatePicker Name="DateTo" @bind-Value=@leaveRequest.DateTo DateFormat="d" Class="w-100" Change=@(arg => DateChanged(arg)) />
                        <RadzenRequiredValidator Component="DateTo" Text="Put date to" Style="position: initial" Popup="true" />
                        <RadzenCompareValidator Value=@leaveRequest.DateFrom Component="DateTo" Style="position: initial" Popup="true" Operator="CompareOperator.GreaterThanEqual" Text="Date from must be less or equal date to" />
                    </div>
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Leave type:</RadzenText>
                        <RadzenDropDown @bind-Value="leaveRequest.LeaveTypeId" Data="@leaveTypes" TextProperty="Name" ValueProperty="Id" Name="LeaveType" Class="w-100">
                        </RadzenDropDown>
                        <RadzenRequiredValidator Component="LeaveType" Text="Choose leave type" Style="position: initial" Popup="true" />
                    </div>
@*                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-1">Hours:</RadzenText>
                        <InputText type="time" @bind-Value="TimeProxy" />
                    </div>*@
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Remarks:</RadzenText>
                        <RadzenTextArea Placeholder="Enter here..." @bind-Value="leaveRequest.Remarks" Class="w-100" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-4">
                        <RadzenButton type="submit" Text="Create" class="mt-2"></RadzenButton>
                    </div>
                </div>
            </RadzenCard>
            </div>
            <div class="col-xl-8">
                <RadzenCard  style="min-height: 29rem">
                    <RadzenText TextStyle="TextStyle.H6" class="mb-1">Leave details:</RadzenText>
                    <hr class="mt-2 mb-3"/>
                    @if(leaveSummary == null)
                    {
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Loading...</RadzenText>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Days available: @leaveSummary.DaysAvailable</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Days available after submitting the request: @leaveSummary.DaysAvailableAfterSubmitting</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">All days in requests: @leaveSummary.AllDaysInRequests</RadzenText>
                    }
                    <RadzenText TextStyle="TextStyle.H6" class="mb-1 mt-4">Date range details:</RadzenText>
                    <hr class="mt-2 mb-3"/>
                    @if(dateSummary == null)
                    {
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Loading...</RadzenText>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Calendar days: @dateSummary.Days</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Working days: @dateSummary.WorkingDays</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Free days: @dateSummary.FreeDays</RadzenText>
                    }
                </RadzenCard>
            </div>
        </div>
    </RadzenTemplateForm>
</div>

@functions
{
    string TimeProxy
    {
        get => leaveRequest.Duration?.ToString() ?? "";
        set
        {
            TimeSpan.TryParse(value,out var parsedValue);
            leaveRequest.Duration = parsedValue;
        }
  }
}
@code {
    private CreateLeaveRequestDto leaveRequest = new();
    private EditContext? editContext;
    private IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
    private LeaveSummary? leaveSummary;
    private DateSummary? dateSummary;
    private WorkingHoursCollection workingHours = new WorkingHoursCollection(Enumerable.Empty<WorkingHoursModel>());

    protected override void OnInitialized()
    {
        var now = DateTimeOffset.UtcNow.GetDayWithoutTime();
        leaveRequest.DateFrom = now.Date;
        leaveRequest.DateTo = now.Date;
        //leaveRequest.Duration = TimeSpan.FromHours(8);
        editContext = new(leaveRequest);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.CreateModel().GetEmail();
        var now = DateTimeOffset.UtcNow.GetDayWithoutTime();
        leaveTypes = await LeaveTypesService.GetLeaveTypes();
        leaveRequest.LeaveTypeId = leaveTypes.FirstOrDefault(lt => lt.Properties.Catalog == LeaveSystem.Shared.LeaveTypeCatalog.Holiday)?.Id;
        workingHours = await WorkingHoursService.GetUserWorkingHours(email, now.GetFirstDayOfYear(), now.GetLastDayOfYear());
        var workingHoursDuration = workingHours.GetDuration();
        dateSummary = GetDateSummary(leaveRequest.DateFrom, leaveRequest.DateTo, workingHoursDuration);
        leaveSummary = new("", "", "");
    }
    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("[HandleSubmit]: Form is valid");
            try
            {
                await Http.PostAsJsonAsync("api/leaveRequests", leaveRequest);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, "AccessTokenNotAvailableException");
                exception.Redirect();
            }
        }
        else
        {
            Logger.LogTrace("[HandleSubmit]: Form is INVALID");
        }
    }

    private void DateChanged(DateTime? _)
    {
        var workingHoursDuration = workingHours.GetDuration();
        dateSummary = GetDateSummary(leaveRequest.DateFrom, leaveRequest.DateTo, workingHoursDuration);
    }

    private static DateSummary GetDateSummary(DateTimeOffset? dateFrom, DateTimeOffset? dateTo, TimeSpan workingHours)
    {
        if (dateFrom != null && dateTo != null)
        {
            var allDays = DateCalculator.CalculateDuration(dateFrom.Value, dateTo.Value, workingHours, true);
            var workingDays = DateCalculator.CalculateDuration(dateFrom.Value, dateTo.Value, workingHours, false);
            var freeDays = allDays - workingDays;

            return new DateSummary(
                allDays.GetReadableTimeSpan(workingHours),
                workingDays.GetReadableTimeSpan(workingHours),
                freeDays.GetReadableTimeSpan(workingHours));
        }
        return new DateSummary("","","");
    }

    private record class LeaveSummary(string DaysAvailable, string DaysAvailableAfterSubmitting, string AllDaysInRequests);
    private record class DateSummary(string Days, string WorkingDays, string FreeDays);
}


