@page "/create-leave-request"
@using LeaveSystem.Web.Pages.LeaveTypes
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject LeaveTypesService LeaveTypesService
@inject ILogger<CreateLeaveRequest> Logger

<PageTitle>Add leave request</PageTitle>

<h1>Add leave request</h1>

<EditForm Model="@leaveRequest" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <p>
        <label>
            Date from:
            <InputDate @bind-Value="leaveRequest.DateFrom" />
        </label>
    </p>
    <p>
        <label>
            Date from:
            <InputDate @bind-Value="leaveRequest.DateTo" />
        </label>
    </p>
    <p>
        <label>
            Hours:
            @*<InputText @bind-Value="leaveRequest.Hours" />*@
            <InputText type="time" @bind-Value="TimeProxy" />
        </label>
    </p>
    <p>
        <label>
            Leave type:
            <InputSelect @bind-Value="leaveRequest.LeaveTypeId" >
                <option value="">Select leave type ...</option>
                @foreach (var leaveType in leaveTypes)
                {
                    <option value="@leaveType.Id">@leaveType.Name</option>
                }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Remarks (optional):
            <InputTextArea @bind-Value="leaveRequest.Remarks" />
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>
@functions
{
    string TimeProxy
    {
        get => leaveRequest.Duration?.ToString() ?? "";
        set
        {
            TimeSpan.TryParse(value,out var parsedValue);
            leaveRequest.Duration = parsedValue;
        }
  }
}
@code {
    private CreateLeaveRequestDto leaveRequest = new();
    private EditContext? editContext;
    private IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();

    protected override void OnInitialized()
    {
        var today = DateTime.Today;
        leaveRequest.DateFrom = today;
        leaveRequest.DateTo = today;
        //leaveRequest.Duration = TimeSpan.FromHours(8);
        editContext = new(leaveRequest);
    }
    protected override async Task OnInitializedAsync()
    {
        leaveTypes = await LeaveTypesService.GetLeaveTypes();
    }
    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("[HandleSubmit]: Form is valid");
            try
            {
                await Http.PostAsJsonAsync("api/leaveRequests", leaveRequest);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, "AccessTokenNotAvailableException");
                exception.Redirect();
            }
        }
        else
        {
            Logger.LogTrace("[HandleSubmit]: Form is INVALID");
        }
    }
}


