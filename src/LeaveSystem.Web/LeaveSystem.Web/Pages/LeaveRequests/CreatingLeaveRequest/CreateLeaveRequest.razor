@page "/create-leave-request"
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LeaveSystem.Web.Pages.WorkingHours
@using LeaveSystem.Web.Extensions
@using LeaveSystem.Shared
@using Microsoft.AspNetCore.Components.Authorization;
@using LeaveSystem.Shared.WorkingHours
@using System.Text.Json
@using LeaveSystem.EventSourcing.WorkingHours
@attribute [Authorize(Policy = PolicyName)]
@inject HttpClient Http
@inject LeaveTypesService LeaveTypesService
@inject WorkingHoursService WorkingHoursService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetLeaveRequestsService GetLeaveRequestsService
@inject UserLeaveLimitsService UserLeaveLimitsService
@inject NotificationService NotificationService
@inject NavigationManager NavManager
@inject System.Net.Http.HttpClient HttpClient
@inject ILogger<CreateLeaveRequest> Logger

<PageTitle>Add leave request</PageTitle>

<div class="container-fluid">
    <h1>Add leave request</h1>
    @if (workingHours == TimeSpan.Zero)
    {
        <RadzenCard Style="width: fit-content">
            <div class="row" style="width: fit-content">
                <RadzenText style="color: #ff5959" TextStyle="TextStyle.H5" TagName="TagName.P">You need to have assigned working hours to add leave request</RadzenText>
            </div>
        </RadzenCard>
    }
    else
    {
        <RadzenTemplateForm TItem="CreateLeaveRequestOnBehalfDto" Data=@leaveRequest Submit=@HandleSubmit>
            <div class="row">
                <div class="col-xl-4">
                    <RadzenCard>
                        <div class="row">
                            <AuthorizeView Policy="@OnBehalfPolicyName" Context="CreateOnBehalf">
                                <div>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Create on behalf of:</RadzenText>
                                    <RadzenDropDown @bind-Value="onBehalfId" Data="@Employees" TextProperty="Name" ValueProperty="Id" Name="OnBehalf" Class="w-100" AllowClear="true" NullText="Select user ..." Change=@(arg => OnBehalfChanged(arg))/>
                                </div>
                            </AuthorizeView>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Date from:</RadzenText>
                                <RadzenDatePicker Name="DateFrom" @bind-Value=@leaveRequest.DateFrom DateFormat="d" Class="w-100" Change=@(arg => DateChanged(arg))/>
                                <RadzenRequiredValidator Component="DateFrom" Text="Put date from" Style="position: initial" Popup="true"/>
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Date to:</RadzenText>
                                <RadzenDatePicker Name="DateTo" @bind-Value=@leaveRequest.DateTo DateFormat="d" Class="w-100" Change=@(arg => DateChanged(arg))/>
                                <RadzenRequiredValidator Component="DateTo" Text="Put date to" Style="position: initial" Popup="true"/>
                                <RadzenCompareValidator Value=@leaveRequest.DateFrom Component="DateTo" Style="position: initial" Popup="true" Operator="CompareOperator.GreaterThanEqual" Text="Date from must be less or equal date to"/>
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Leave type:</RadzenText>
                                <RadzenDropDown @bind-Value="leaveRequest.LeaveTypeId" Data="@leaveTypes" TextProperty="Name" ValueProperty="Id" Name="LeaveType" Class="w-100" Change=@(arg => LeaveTypeChanged(arg))/>
                                <RadzenRequiredValidator Component="LeaveType" Text="Choose leave type" Style="position: initial" Popup="true"/>
                            </div>
                            @if (durationEnabled)
                            {
                                <div>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-1">Hours:</RadzenText>
                                    <InputText type="time" @bind-Value="TimeProxy"/>
                                </div>
                            }
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="mb-1 mt-2">Remarks:</RadzenText>
                                <RadzenTextArea Placeholder="Enter here..." @bind-Value="leaveRequest.Remarks" Class="w-100"/>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                                <RadzenButton type="submit" Text="Create" class="mt-2"></RadzenButton>
                            </div>
                        </div>
                    </RadzenCard>
                </div>
                <div class="col-xl-8">
                    <RadzenCard style="min-height: 29rem">
                        <RadzenText TextStyle="TextStyle.H6" class="mb-1">Leave details:</RadzenText>
                        <hr class="mt-2 mb-3"/>
                        @if (leaveSummary == null)
                        {
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Loading...</RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Days available: <strong>@leaveSummary.DaysAvailable</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Days available after submitting the request: <strong>@leaveSummary.DaysAvailableAfterSubmitting</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">All days in requests: <strong>@leaveSummary.AllDaysInRequests</strong></RadzenText>
                        }
                        <RadzenText TextStyle="TextStyle.H6" class="mb-1 mt-4">Date range details:</RadzenText>
                        <hr class="mt-2 mb-3"/>
                        @if (dateSummary == null)
                        {
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Loading...</RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Calendar days: <strong>@dateSummary.Days</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Working days: <strong>@dateSummary.WorkingDays</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="mb-1 mt-2">Free days: <strong>@dateSummary.FreeDays</strong></RadzenText>
                        }
                    </RadzenCard>
                </div>
            </div>
        </RadzenTemplateForm>
    }
</div>

@functions
{
    string TimeProxy
    {
        get => leaveRequest.Duration?.ToString() ?? "";
        set
        {
            TimeSpan.TryParse(value, out var parsedValue);
            leaveRequest.Duration = parsedValue;
        }
    }
}

@code {
        public const string PolicyName = "CreateLeaveRequest";
        public const string OnBehalfPolicyName = "CreateLeaveRequestOnBehalf";
    private CreateLeaveRequestOnBehalfDto leaveRequest = new();
    private EditContext? editContext;
    private IEnumerable<LeaveTypesService.LeaveTypeDto> leaveTypes = Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
    private LeaveSummary? leaveSummary;
    private DateSummary? dateSummary;
    private IEnumerable<LeaveRequestShortInfo> submittedLeaveRequests = Enumerable.Empty<LeaveRequestShortInfo>();
    private IEnumerable<UserLeaveLimitsService.UserLeaveLimitDto> limits = Enumerable.Empty<UserLeaveLimitsService.UserLeaveLimitDto>();
    private TimeSpan workingHours;
    private bool durationEnabled = true;
    private IEnumerable<GetEmployeeDto> employees = Enumerable.Empty<GetEmployeeDto>();
    public SemaphoreSlim employeesLock { get; set; } = new SemaphoreSlim(1);
    private string? onBehalfId = null;
    private FederatedUser currentUser;

    private IEnumerable<GetEmployeeDto> Employees
    {
        get
        {
            if (!employees.Any())
            {
                _ = GetEmployees();
            }
            return employees;
        }
        set { employees = value; }
    }

    protected override void OnInitialized()
    {
        var now = DateTimeOffset.UtcNow.GetDayWithoutTime();
        leaveRequest.DateFrom = now.Date;
        leaveRequest.DateTo = now.Date;
        leaveRequest.Duration = TimeSpan.FromHours(8);
        editContext = new(leaveRequest);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUser = authState.User.CreateModel();

            var now = DateTimeOffset.UtcNow.GetDayWithoutTime();
            var firstDay = now.GetFirstDayOfYear();
            var lastDay = now.GetLastDayOfYear();
            leaveTypes = await LeaveTypesService.GetLeaveTypes();
            leaveRequest.LeaveTypeId = leaveTypes.FirstOrDefault(lt => lt.Properties.Catalog == LeaveSystem.Shared.LeaveTypeCatalog.Holiday)?.Id;
            var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(new GetLeaveRequestsQuery(firstDay, lastDay, 1, 1000)
            {
                CreatedByUserIds = new string[] { currentUser.Id }
            });
            var getLimitsTask = UserLeaveLimitsService.GetLimits(currentUser.Id, firstDay, lastDay);
            var getUserWorkingHoursTask = WorkingHoursService.GetUserWorkingHours(currentUser.Id);
            await Task.WhenAll(getLeaveRequestsTask, getLimitsTask, getUserWorkingHoursTask);

            submittedLeaveRequests = getLeaveRequestsTask.Result?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
            workingHours = getUserWorkingHoursTask.Result.DurationOrZero();
            limits = getLimitsTask.Result;
            dateSummary = GetDateSummary(leaveRequest.DateFrom, leaveRequest.DateTo, workingHours);
            leaveSummary = GetLeaveDetails();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, nameof(OnInitializedAsync));
            NotificationService.Notify(new NotificationMessage
            {
                Duration = 40000,
                Severity = NotificationSeverity.Error,
                Summary = "Something went wrong",
                Detail = ex.Message
            });
            throw;
        }
    }

    private async Task GetEmployees()
    {
        await employeesLock.WaitAsync();
        try
        {
            if (!employees.Any())
            {
                var employeesFromApi = await HttpClient.GetFromJsonAsync<GetEmployeesDto>("api/employees", new JsonSerializerOptions(JsonSerializerDefaults.Web));
                Employees = employeesFromApi?.Items.Where(e => e != null && e.Id != currentUser.Id) ?? Enumerable.Empty<GetEmployeeDto>();
                Logger.LogInformation($"currentUser.Id {currentUser.Id}");
                Logger.LogInformation(string.Join("\r\n", Employees.Select(c => $"{c.Id} {c.Name}")));
                await InvokeAsync(StateHasChanged);
            }
        }
        finally
        {
            employeesLock.Release();
        }
    }

    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            try
            {
                if (!durationEnabled)
                {
                    leaveRequest.Duration = null;
                }
                var onBehalf = onBehalfId is null ? null : employees.First(e => e?.Id == onBehalfId);
                var response = onBehalf is null ? await CreateLeaveRequestApi() : await CreateLeaveRequestApi(onBehalf);
                if ((int)response.StatusCode < 400)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Duration = 40000,
                        Severity = NotificationSeverity.Success,
                        Summary = "Information",
                        Detail = "The leave request has been added",
                    });
                    NavManager.NavigateTo("leave-requests");
                }
                else
                {
                    var resultContent = await response.Content.ReadAsStringAsync();
                    Logger.LogError(resultContent);
                    NotificationService.Notify(new NotificationMessage
                    {
                        Duration = 40000,
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = resultContent.Substring(59, 98),
                    });
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, nameof(AccessTokenNotAvailableException));
                exception.Redirect();
                return;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, nameof(HandleSubmit));
                NotificationService.Notify(new NotificationMessage
                {
                    Duration = 40000,
                    Severity = NotificationSeverity.Error,
                    Summary = "Something went wrong",
                    Detail = ex.Message
                });
                throw;
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Duration = 40000,
                Severity = NotificationSeverity.Warning,
                Summary = "The edit form is invalid"
            });
        }
    }

    private Task<HttpResponseMessage> CreateLeaveRequestApi()
    {
        return Http.PostAsJsonAsync("api/leaveRequests", leaveRequest);
    }

    private Task<HttpResponseMessage> CreateLeaveRequestApi(GetEmployeeDto onBehalf)
    {
        var leaveRequestOnBehalf = leaveRequest with { CreatedByOnBehalf = FederatedUser.Create(onBehalf.Id, onBehalf.Email, onBehalf.Name) };
        return Http.PostAsJsonAsync("api/leaveRequests/onBehalf", leaveRequestOnBehalf);
    }

    private async Task OnBehalfChanged(object? onBehalf)
    {
        leaveSummary = null;
        var now = DateTimeOffset.UtcNow.GetDayWithoutTime();
        var firstDay = now.GetFirstDayOfYear();
        var lastDay = now.GetLastDayOfYear();
        var userId = onBehalf?.ToString() ?? currentUser.Id;
        var leaveRequests = await GetLeaveRequestsService.GetLeaveRequests(new GetLeaveRequestsQuery(firstDay, lastDay, 1, 1000)
        {
            CreatedByUserIds = new string[] { userId }
        });
        submittedLeaveRequests = leaveRequests?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
        leaveSummary = GetLeaveDetails();
    }

    private void DateChanged(DateTime? _)
    {
        DateTimeOffset? dateFrom = leaveRequest.DateFrom;
        DateTimeOffset? dateTo = leaveRequest.DateTo;
        durationEnabled = dateFrom?.GetDayWithoutTime() == dateTo?.GetDayWithoutTime();
        dateSummary = GetDateSummary(dateFrom, dateTo, workingHours);
        leaveSummary = GetLeaveDetails();
    }

    private void LeaveTypeChanged(object _)
    {
        leaveSummary = GetLeaveDetails();
    }

    private static DateSummary GetDateSummary(DateTimeOffset? dateFrom, DateTimeOffset? dateTo, TimeSpan workingHours)
    {
        if (dateFrom != null && dateTo != null)
        {
            var allDays = DateCalculator.CalculateDuration(dateFrom.Value, dateTo.Value, workingHours, true);
            var workingDays = DateCalculator.CalculateDuration(dateFrom.Value, dateTo.Value, workingHours, false);
            var freeDays = allDays - workingDays;

            return new DateSummary(
                allDays.GetReadableTimeSpan(workingHours),
                workingDays.GetReadableTimeSpan(workingHours),
                freeDays.GetReadableTimeSpan(workingHours));
        }
        return new DateSummary("", "", "");
    }

    private LeaveSummary GetLeaveDetails()
    {
        var submittedLeaveRequestsDuration = TimeSpan.FromTicks(submittedLeaveRequests
            .Where(lr => lr.LeaveTypeId == leaveRequest.LeaveTypeId)
            .Sum(lr => lr.Duration.Ticks));
        var limit = limits.FirstOrDefault(l => l.LeaveTypeId == leaveRequest.LeaveTypeId &&
                                               (l.ValidSince == null || l.ValidSince <= leaveRequest.DateFrom) &&
                                               (l.ValidUntil == null || l.ValidUntil >= leaveRequest.DateFrom));
        var leaveType = leaveTypes.FirstOrDefault(lt => lt.Id == leaveRequest.LeaveTypeId);
        var workingDays = leaveRequest.DateFrom != null && leaveRequest.DateTo != null ?
            DateCalculator.CalculateDuration((DateTimeOffset)leaveRequest.DateFrom, (DateTimeOffset)leaveRequest.DateTo, workingHours, leaveType?.Properties.IncludeFreeDays) :
            TimeSpan.Zero;
        var totalLimit = limit?.TotalLimit;
        var daysAvailable = totalLimit - submittedLeaveRequestsDuration;
        var daysAvailableAfterSubmitting = totalLimit - submittedLeaveRequestsDuration - workingDays;
        return new(daysAvailable?.GetReadableTimeSpan(workingHours) ?? "",
            daysAvailableAfterSubmitting?.GetReadableTimeSpan(workingHours) ?? "",
            submittedLeaveRequestsDuration.GetReadableTimeSpan(workingHours));
    }

    private record LeaveSummary(string DaysAvailable, string DaysAvailableAfterSubmitting, string AllDaysInRequests);

    private record DateSummary(string Days, string WorkingDays, string FreeDays);

}