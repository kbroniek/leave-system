@using LeaveSystem.Shared
@using LeaveSystem.Shared.Date
@using LeaveSystem.Shared.WorkingHours
@using LeaveSystem.Web.Pages.WorkingHours.ShowingWorkingHours
@using LamarCodeGeneration.Util

@inject DialogService DialogService
@inject IToastService ToastService
@inject WorkingHoursService WorkingHoursService
@inject ILogger<EditWorkingHoursDialog> Logger
@inject DateService DateService

@if (workingHours is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <RadzenStack Gap="1.5rem">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Working Hours" Click="@InsertRow" Disabled=@(workingHoursToInsert != null || workingHoursToUpdate != null)/>
        <RadzenDataGrid @ref="workingHoursGrid" Data="workingHours" EditMode="DataGridEditMode.Single" TItem="WorkingHoursDto" AllowColumnResize="true" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="WorkingHoursDto" Property="DateFrom" Title="Date From" Frozen="true">
                    <Template Context="data">
                        @DateToString(data.DateFrom)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker @bind-Value="data.DateFrom" DateFormat="d" Style="width: 150px"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WorkingHoursDto" Property="DateTo" Title="Date To">
                    <Template Context="data">
                        @DateToString(data.DateTo)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker @bind-Value="data.DateTo" DateFormat="d" Style="width: 150px"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WorkingHoursDto" Property="Duration" Title="Duration">
                    <Template Context="data">
                        @DayTimeToString(data.Duration)
                    </Template>
                    <EditTemplate Context="data">
                        <InputText type="time" @bind-Value="data.DurationProxy" Style="width: 150px"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WorkingHoursDto" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(data))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(data))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(data))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Close" Click="Close" Style="width: 80px;"/>
        </RadzenStack>
    </RadzenStack>
}

@code {

    [Parameter] public string? UserId { get; set; }

    List<WorkingHoursDto>? workingHours;
    RadzenDataGrid<WorkingHoursDto>? workingHoursGrid;
    WorkingHoursDto? workingHoursToInsert;
    WorkingHoursDto? workingHoursToUpdate;
    private string userIdNotNull = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null)
        {
            ToastService.ShowError("Error while initializing dialog");
            Logger.LogError("WorkingHours or UserId is null");
            DialogService.Close();
            return;
        }

        userIdNotNull = UserId;
        try
        {
            var workingHours = await GetWorkingHours(
                new[] { userIdNotNull },
                new[] { WorkingHoursStatus.Current, WorkingHoursStatus.Deprecated, WorkingHoursStatus.Future },
                TimeSpan.FromSeconds(15),
                DateService,
                WorkingHoursService);
            this.workingHours = workingHours.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error occured during getting working hours");
            Logger.LogError(ex, "Error occured during getting working hours");
        }
    }

    public static async Task<IEnumerable<WorkingHoursDto>> GetWorkingHours(
        IEnumerable<string> userIds,
        WorkingHoursStatus[] statuses,
        TimeSpan timeout,
        DateService dateService,
        WorkingHoursService workingHoursService)
    {
        var now = dateService.UtcNow();
        var query = GetWorkingHoursQuery.GetAllForUsers(
            userIds.ToArray(),
            statuses,
            now.GetDayWithoutTime());

        var workingHours = Enumerable.Empty<WorkingHoursDto>();
        bool isTimeout = false;
        do
        {
            var response = await workingHoursService.GetWorkingHours(query);
            if (response is null)
            {
                throw new InvalidOperationException("Something went wrong. Can't get working hours.");
            }

            workingHours = workingHours.Union(response.Items ?? Enumerable.Empty<WorkingHoursDto>());

            if (!response.HasNextPage)
            {
                break;
            }

            isTimeout = (dateService.UtcNow() - now) > timeout;
        } while (!isTimeout);

        if (isTimeout)
        {
            throw new TimeoutException("Something went wrong. Can't get working hours.");
        }

        return workingHours;
    }

    void Reset()
    {
        workingHoursToInsert = null;
        workingHoursToUpdate = null;
    }

    async Task EditRow(WorkingHoursDto workingHours)
    {
        if (workingHoursGrid is null)
        {
            ToastService.ShowError("Error occured during entering edition mode!");
            Logger.LogError("workingHoursGrid is null");
            return;
        }

        workingHoursToUpdate = workingHours;
        await workingHoursGrid.EditRow(workingHours);
    }

    async Task OnUpdateRow(WorkingHoursDto workingHours)
    {
        Reset();
        var editResult = await WorkingHoursService.Edit(workingHours);
        if (!editResult)
        {
            this.workingHours = (await GetWorkingHours(
                new[] { userIdNotNull },
                new[] { WorkingHoursStatus.Current, WorkingHoursStatus.Deprecated, WorkingHoursStatus.Future },
                TimeSpan.FromSeconds(15),
                DateService,
                WorkingHoursService)).ToList();
        }
    }

    async Task SaveRow(WorkingHoursDto workingHours)
    {
        if (workingHoursGrid is null)
        {
            ToastService.ShowError("Error occured during saving working hours!");
            Logger.LogError("workingHoursGrid is null");
            return;
        }

        await workingHoursGrid.UpdateRow(workingHours);
    }

    void CancelEdit(WorkingHoursDto workingHours)
    {
        Reset();
        workingHoursGrid?.CancelEditRow(workingHours);
    }

    void Close()
    {
        Reset();
        DialogService.Close(workingHours);
    }

    async Task InsertRow()
    {
        workingHoursToInsert = new()
        {
            UserId = userIdNotNull
        };
        if (workingHoursGrid is null)
        {
            ToastService.ShowError("Error occured during inserting row!");
            Logger.LogError("workingHoursGrid is null");
            return;
        }

        await workingHoursGrid.InsertRow(workingHoursToInsert);
    }

    async Task OnCreateRow(WorkingHoursDto workingHoursToAdd)
    {
        var addedWorkingHours = await WorkingHoursService.Add(new AddWorkingHoursDto(workingHoursToAdd.UserId, workingHoursToAdd.DateFrom, workingHoursToAdd.DateTo, workingHoursToAdd.Duration));
        if (addedWorkingHours is not null)
        {
            workingHoursToAdd.Id = addedWorkingHours.Id;
            workingHours?.Add(workingHoursToAdd);
        }
        else
        {
            workingHoursGrid?.CancelEditRow(workingHoursToAdd);
        }

        workingHoursToInsert = null;
    }

    string DateToString(DateTimeOffset? date) => date.HasValue ? date.Value.ToString("d") : "";

    string DayTimeToString(TimeSpan timeSpan) => $"{timeSpan:hh\\:mm}";
}
