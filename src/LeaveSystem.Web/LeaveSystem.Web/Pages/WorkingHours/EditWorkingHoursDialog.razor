@using LeaveSystem.Shared.WorkingHours
@using FluentAssertions
@using LeaveSystem.Shared
@using LeaveSystem.Shared.Extensions
@inject DialogService DialogService
@inject IToastService ToastService

<RadzenStack Gap="1.5rem">
    @foreach (var singleWorkingHours in WorkingHoursToUpdate.OrEmptyIfNull())
    {
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenDatePicker @bind-Value="singleWorkingHours.DateFrom" DateFormat="d" Style="width: 150px"/>
            <RadzenDatePicker @bind-Value="singleWorkingHours.DateTo" DateFormat="d" Style="width: 150px"/>
            <RadzenDatePicker @bind-Value="singleWorkingHours.DurationAsDateTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Style="width: 150px"/>
        </RadzenStack>
    }
    @foreach (var singleWorkingHours in WorkingHoursToAdd.OrEmptyIfNull())
    {
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenDatePicker @bind-Value="singleWorkingHours.DateFrom" DateFormat="d" Style="width: 150px"/>
            <RadzenDatePicker @bind-Value="singleWorkingHours.DateTo" DateFormat="d" Style="width: 150px"/>
            <RadzenDatePicker @bind-Value="singleWorkingHours.DurationAsDateTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Style="width: 150px"/>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="-" Click="() => WorkingHoursToAdd?.Remove(singleWorkingHours)">
                <span class="rz-button-text">
                    <i class="fa-solid fa-minus"></i>
                </span>
            </RadzenButton>
        </RadzenStack>
    }
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text="Close" Click="Close" Style="width: 80px;"/>
        <RadzenButton Text="Add" Click="() => WorkingHoursToAdd?.Add(new(UserId))"></RadzenButton>
        <RadzenButton Text="Reset" Click="Reset" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
    </RadzenStack>
</RadzenStack>

@code {

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<WorkingHoursDto>? WorkingHoursToUpdate { get; set; }

    [Parameter]
    public List<AddWorkingHoursDto>? WorkingHoursToAdd { get; set; }

    IEnumerable<WorkingHoursDto> workingHoursToUpdateToReset = Enumerable.Empty<WorkingHoursDto>();
    List<AddWorkingHoursDto> workingHoursToAddToReset = new ();

    protected override void OnInitialized()
    {
        if (WorkingHoursToUpdate is null || WorkingHoursToAdd is null)
        {
            ToastService.ShowError("Error while initializing dialog");
            DialogService.Close();
            return;
        }   
        workingHoursToUpdateToReset = ObjectCopier.Copy(WorkingHoursToUpdate);
        workingHoursToAddToReset = WorkingHoursToAdd.ToList();
    }

    void Reset()
    {
        WorkingHoursToUpdate = ObjectCopier.Copy(workingHoursToUpdateToReset);
        WorkingHoursToAdd = workingHoursToAddToReset.ToList();
    }

    void Close()
    {
        DialogService.Close();
    }

}