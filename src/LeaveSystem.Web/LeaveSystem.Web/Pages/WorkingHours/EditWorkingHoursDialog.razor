@using LeaveSystem.Shared.WorkingHours
@using FluentAssertions
@using LeaveSystem.Shared
@using LeaveSystem.Shared.Extensions
@inject DialogService DialogService
@inject IToastService ToastService
@inject WorkingHoursService WorkingHoursService

<RadzenStack Gap="1.5rem">
    <RadzenDataGrid @ref="workingHoursGrid" Data="WorkingHours" EditMode="DataGridEditMode.Single" TItem="WorkingHoursDto" AllowColumnResize="true" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <Columns>
            <RadzenDataGridColumn TItem="WorkingHoursDto" Property="DateFrom" Title="Date From" Frozen="true">
                <Template Context="data">
                    @DateToString(data.DateFrom)
                </Template>
                <EditTemplate Context="data">
                    <RadzenDatePicker @bind-Value="data.DateFrom" DateFormat="d" Style="width: 150px"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WorkingHoursDto" Property="DateTo" Title="Date To">
                <Template Context="data">
                    @DateToString(data.DateTo)
                </Template>
                <EditTemplate Context="data">
                    <RadzenDatePicker @bind-Value="data.DateTo" DateFormat="d" Style="width: 150px"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WorkingHoursDto" Property="DurationAsDateTime" Title="Duration">
                <Template Context="data">
                    @DayTimeToString(data.Duration)
                </Template>
                <EditTemplate Context="data">
                    <RadzenDatePicker @bind-Value="data.DurationAsDateTime" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Style="width: 150px"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WorkingHoursDto" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="data">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="data">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(data))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(data))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text="Close" Click="Close" Style="width: 80px;"/>
        <RadzenButton Text="Add" Click="InsertRow"></RadzenButton>
    </RadzenStack>
</RadzenStack>

@code {

    [Parameter]
    public string? UserId { get; set; }

    [Parameter]
    public List<WorkingHoursDto>? WorkingHours { get; set; }

    RadzenDataGrid<WorkingHoursDto>? workingHoursGrid;
    List<WorkingHoursDto> workingHoursToReset = new();
    WorkingHoursDto? workingHoursToInsert;

    protected override void OnInitialized()
    {
        if (WorkingHours is null || UserId is null)
        {
            ToastService.ShowError("Error while initializing dialog");
            DialogService.Close();
            return;
        }
        workingHoursToReset = WorkingHours.ToList();
    }

    void Reset()
    {
        WorkingHours = workingHoursToReset.ToList();
    }

    void Close()
    {
        Reset();
        DialogService.Close();
    }

    async Task InsertRow()
    {
        workingHoursToInsert = new()
        {
            UserId = UserId!
        };
        if (workingHoursGrid is null)
        {
            return;
        }
        await workingHoursGrid.InsertRow(workingHoursToInsert);
    }

    async Task OnCreateRow(WorkingHoursDto workingHours)
    {
        var addedWorkingHours = await WorkingHoursService.AddAndReturnDto(new AddWorkingHoursDto(workingHours.UserId, workingHours.DateFrom, workingHours.DateTo, workingHours.Duration));
        if (addedWorkingHours is not null)
        {
            workingHours = addedWorkingHours;
        }
        workingHoursToInsert = null;
    }

    async Task EditRow(WorkingHoursDto workingHours)
    {
        if (workingHoursGrid is null)
        {
            return;
        }
        await workingHoursGrid.EditRow(workingHours);
    }

    async Task SaveRow(WorkingHoursDto workingHours)
    {
        if (workingHoursGrid is null)
        {
            return;
        }
        await workingHoursGrid.UpdateRow(workingHours);
    }

    async Task OnUpdateRow(WorkingHoursDto workingHours)
    {
        if (workingHours == workingHoursToInsert)
        {
            workingHoursToInsert = null;
        }
        
        await WorkingHoursService.Edit(workingHours);
        workingHoursToInsert = null;
    }

    void CancelEdit(WorkingHoursDto workingHours)
    {
        if (workingHours == workingHoursToInsert)
        {
            workingHoursToInsert = null;
        }
        workingHoursGrid?.CancelEditRow(workingHours);
    }

    string DateToString(DateTimeOffset? date) => date.HasValue ? date.Value.ToString("dd.MM.yyyy") : "";

    string DayTimeToString(TimeSpan timeSpan) => $"{timeSpan:hh\\:mm}";

}