@page "/users"
@using GoldenEye.Shared.Core.Extensions.Basic
@using LeaveSystem.Shared.Auth;
@using LeaveSystem.Shared.Date
@using LeaveSystem.Shared.WorkingHours
@using LeaveSystem.Web.Pages.WorkingHours
@using LeaveSystem.Web.Pages.WorkingHours.ShowingWorkingHours
@using Microsoft.AspNetCore.Authorization;
@using LeaveSystem.Shared
@using LeaveSystem.Shared.Extensions
@using System.Collections
@using LeaveSystem.Web.Pages.UsersManagement
@using LeaveSystem.Web.Extensions

@attribute [Authorize(Policy = @PolicyName)]
@inject UsersService UsersService
@inject WorkingHoursService WorkingHoursService
@inject DialogService DialogService
@inject IToastService ToastService
@inject ILogger<UsersPage> Logger
@inject DateService DateService


@if (usersForView is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New User" Click="@InsertRow" Disabled=@(userToInsert != null || userToUpdate != null)/>
    <RadzenDataGrid @ref="usersGrid" AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                    Data="@usersForView" TItem="UserForView" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="UserForView" Property="User.Name" Title="Name" Frozen="true" Width="auto">
                <EditTemplate Context="data">
                    <RadzenTextBox @bind-Value="data.User.Name" Style="width:100%; display: block" Name="Name"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserForView" Property="User.Email" Title="Email" Width="auto">
                <EditTemplate Context="data">
                    <RadzenTextBox @bind-Value="data.User.Email" Style="width:100%; display: block" Name="Email"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserForView" Title="Roles" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="auto">
                <Template Context="data">
                    @RolesToString(data.User.Roles)
                </Template>
                <EditTemplate Context="data">
                    <RadzenDropDown @bind-Value=data.User.Roles Data=@allRoles
                                    Multiple=true AllowClear=true Placeholder="Select roles" Chips=true Style="width:100%; display: block"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserForView" Title="WorkingHours" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="auto">
                <Template Context="data">
                    @WorkingHoursToString(data.WorkingHours)
                </Template>
                <EditTemplate Context="data">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @if (data.WorkingHours is not null)
                        {
                            <InputText type="time" Style="width: 100%" @bind-Value="data.WorkingHours.DurationProxy"/>
                        }
                        <div class="@(data.WorkingHours is null ? "d-flex justify-content-center w-100" : "")">
                            <RadzenButton Click=@(() => ShowWorkingHoursDialog(data))>
                                <span class="rz-button-text">
                                    <i class="fa-solid fa-pen"></i>
                                </span>
                            </RadzenButton>
                        </div>
                    </RadzenStack>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserForView" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="data">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="data">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(data))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(data))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(data))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public const string PolicyName = "ShowUserPage";
    string[] allRoles = Enum.GetNames<RoleType>();
    RadzenDataGrid<UserForView>? usersGrid;
    IEnumerable<UserForView>? usersForView;
    UserForView? userToInsert;
    UserForView? userToUpdate;

    void Reset()
    {
        userToInsert = null;
        userToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var users = (await UsersService.Get()).ToList();
        var now = DateService.UtcNowWithoutTime();
        try
        {
            //TODO: working hours should be taken from leave request
            var workingHours = await EditWorkingHoursDialog.GetWorkingHours(
                users.Select(x => x.Id!),
                new[] { WorkingHoursStatus.Current },
                TimeSpan.FromSeconds(15),
                DateService,
                WorkingHoursService);
            usersForView = users.Select(x => new UserForView(x, workingHours.FirstOrDefault(
                h => h.UserId == x.Id && h.DateFrom <= now && h.DateTo >= now)));
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error occured during getting working hours");
            Logger.LogError(ex, "Error occured during getting working hours");
        }
    }

    async Task EditRow(UserForView user)
    {
        if (usersGrid is null)
        {
            Logger.LogError($"{nameof(EditRow)}: Can't edit row. usersGrid is null");
            return;
        }

        userToUpdate = user;
        await usersGrid.EditRow(user);
    }

    async Task OnUpdateRow(UserForView user)
    {
        Reset();
        await UsersService.Edit(user.User);
        if (user.WorkingHours is not null)
        {
            await WorkingHoursService.EditAsync(user.WorkingHours);
        }
    }

    async Task SaveRow(UserForView user)
    {
        if (usersGrid is null)
        {
            Logger.LogError($"{nameof(SaveRow)}: Can't save row. usersGrid is null");
            return;
        }

        await usersGrid.UpdateRow(user);
    }

    void CancelEdit(UserForView user)
    {
        Reset();

        usersGrid?.CancelEditRow(user);
    }

    async Task DeleteRow(UserForView user)
    {
        Reset();

        if (usersGrid is null)
        {
            Logger.LogError($"{nameof(DeleteRow)}: Can't delete row. usersGrid is null");
            return;
        }

        if (user.User.Id is null)
        {
            Logger.LogError($"{nameof(DeleteRow)}: Can't user because is id null. {user.User.Id} {user.User.Name}");
            usersGrid.CancelEditRow(user);
            await usersGrid.Reload();
            return;
        }

        await UsersService.Delete(user.User.Id);
        await usersGrid.Reload();
    }

    async Task InsertRow()
    {
        userToInsert = UserForView.Create();
        if (usersGrid is null)
        {
            Logger.LogError($"{nameof(InsertRow)}: Can't insert row. usersGrid is null");
            return;
        }

        await usersGrid.InsertRow(userToInsert);
    }

    async Task OnCreateRow(UserForView userForView)
    {
        var userId = await UsersService.Create(userForView.User);
        userForView.User.Id = userId;
        var firstDayOfYear = DateService.UtcNow().GetFirstDayOfYear();
        var workingHours = await WorkingHoursService.AddAsync(new AddWorkingHoursDto(userId, firstDayOfYear, null, userForView.WorkingHours.Duration));
        if (workingHours is not null)
        {
            Logger.LogError($"{nameof(OnCreateRow)}: Cannot add working hours for user {userForView.User.Id} {userForView.User.Name}");
        }

        userToInsert = null;
    }

    string WorkingHoursToString(WorkingHoursDto? workingHours) =>
        workingHours?.DurationProxy ?? "---";

    string RolesToString(IEnumerable<string>? roles) =>
        roles is null ? "" : string.Join(",", roles);

    async Task ShowWorkingHoursDialog(UserForView userForView)
    {
        if (userForView.User.Id.IsNullOrWhiteSpace())
        {
            ToastService.ShowError("Can not open the dialog");
            Logger.LogError($"{nameof(ShowWorkingHoursDialog)}: userId is null or white space");
            return;
        }
        var result = await DialogService.OpenAsync<EditWorkingHoursDialog>("Edit workingHours",
            new Dictionary<string, object>
            {
                { "UserId", userForView.User.Id! }
            },
            new DialogOptions { Width = "800px", Resizable = true, Draggable = true, ShowClose = false});
        var workingHoursFromDialog = (IEnumerable<WorkingHoursDto>)result;
        var now = DateService.UtcNowWithoutTime();
        userForView.WorkingHours = workingHoursFromDialog.FirstOrDefault(h =>
            h.DateFrom <= now && (h.DateTo >= now || h.DateTo is null));
    }

}
