@page "/users"
@using LeaveSystem.Shared.Auth;
@using LeaveSystem.Shared.WorkingHours
@using LeaveSystem.Web.Pages.WorkingHours
@using LeaveSystem.Web.Pages.WorkingHours.ShowingWorkingHours
@using Microsoft.AspNetCore.Authorization;
@using LeaveSystem.Shared
@using LeaveSystem.Shared.Extensions
@using System.Collections
@using GoldenEye.Extensions.Basic
@using LeaveSystem.Web.Pages.UsersManagement
@using LeaveSystem.Web.Extensions

@attribute [Authorize(Policy = @PolicyName)]
@inject UsersService UsersService
@inject WorkingHoursService WorkingHoursService
@inject DialogService DialogService
@inject IToastService ToastService
@inject ILogger<UsersPage> Logger


@if (users is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New User" Click="@InsertRow" Disabled=@(userWithWorkingHoursToInsert != null || userToUpdate != null)/>
    <RadzenDataGrid @ref="usersGrid" AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                    Data="@usersWithWorkingHours" TItem="UserWithWorkingHoursDto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="UserWithWorkingHoursDto" Property="Name" Title="Name" Frozen="true" Width="auto">
                <EditTemplate Context="data">
                    <RadzenTextBox @bind-Value="data.Name" Style="width:100%; display: block" Name="Name"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserWithWorkingHoursDto" Property="Email" Title="Email" Width="auto">
                <EditTemplate Context="data">
                    <RadzenTextBox @bind-Value="data.Email" Style="width:100%; display: block" Name="Email"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserWithWorkingHoursDto" Title="Roles" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="auto">
                <Template Context="data">
                    @RolesToString(data.Roles)
                </Template>
                <EditTemplate Context="data">
                    <RadzenDropDown @bind-Value=data.Roles Data=@allRoles
                                    Multiple=true AllowClear=true Placeholder="Select roles" Chips=true Style="width:100%; display: block"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserWithWorkingHoursDto" Title="WorkingHours" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="auto">
                <Template Context="data">
                    @CurrentWorkingHoursToString(data)
                </Template>
                <EditTemplate Context="data">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <InputText type="time" Style="width: 100%" @bind-Value="data.CurrentDurationProxy"  />
                        <RadzenButton Click=@(() => ShowWorkingHoursDialog(data.Id)) Disabled="data.WorkingHours is null">
                            <span class="rz-button-text">
                                <i class="fa-solid fa-pen"></i>
                            </span>
                        </RadzenButton>
                    </RadzenStack>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserWithWorkingHoursDto" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="data">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="data">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(data))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(data))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(data))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public const string PolicyName = "ShowUserPage";
    string[] allRoles = Enum.GetNames<RoleType>();
    RadzenDataGrid<UserWithWorkingHoursDto>? usersGrid;
    IEnumerable<UserDto>? users;
    IEnumerable<UserWithWorkingHoursDto>? usersWithWorkingHours;
    UserWithWorkingHoursDto? userWithWorkingHoursToInsert;
    UserDto? userToUpdate;
    IEnumerable<WorkingHoursDto>? workingHoursToUpdate;
    readonly DateTimeOffset now = DateTimeOffset.Now.GetDayWithoutTime();


    string RolesToString(IEnumerable<string>? roles)
        => roles is null ? "" : string.Join(",", roles);

    void Reset()
    {
        userWithWorkingHoursToInsert = null;
        userToUpdate = null;
        workingHoursToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        users = (await UsersService.Get()).ToArray();
        var query = GetWorkingHoursQuery.GetAllForUsers(users.Select(x => x.Id ?? "").ToArray());
        var workingHours = await WorkingHoursService.GetWorkingHours(query);
        usersWithWorkingHours = users.Select(x => new UserWithWorkingHoursDto(x.Id, x.Name, x.Email, x.Roles, workingHours?.Items?.Where(wh => wh.UserId == x.Id).OrderBy(wh => wh.DateFrom) ?? Enumerable.Empty<WorkingHoursDto>()));
    }

    async Task EditRow(UserWithWorkingHoursDto userWithWorkingHours)
    {
        userToUpdate = userWithWorkingHours.GetUser();
        workingHoursToUpdate = userWithWorkingHours.WorkingHours;
        if(!workingHoursToUpdate.Any())
        {
            var userId = userToUpdate?.Id;
            if (userId is null)
            {
                // TODO: Log an error. Can't find user to edit.
                return;
            }
            var firstDayOfYear = DateTimeOffset.UtcNow.GetFirstDayOfYear();
            var workingHours = await WorkingHoursService.AddAndReturnDto(new AddWorkingHoursDto(userId, firstDayOfYear, null, WorkingHoursUtils.DefaultWorkingHours));
            if (workingHours is not null)
            {
                userWithWorkingHours.WorkingHours = new List<WorkingHoursDto> { workingHours };
                workingHoursToUpdate = userWithWorkingHours.WorkingHours;
            }
            // TODO: Log an error. Can't find working hours
        }
        if (usersGrid is null)
        {
            // TODO: Log an error. Can't find user to edit.
            return;
        }
        await usersGrid.EditRow(userWithWorkingHours);
    }

    async Task OnUpdateRow(UserWithWorkingHoursDto userWithWorkingHours)
    {
        if (userWithWorkingHours == userWithWorkingHoursToInsert)
        {
            userWithWorkingHoursToInsert = null;
        }

        userToUpdate = null;
        workingHoursToUpdate = null;

        await UsersService.Edit(userWithWorkingHours.GetUser());
        var currentWorkingHours = userWithWorkingHours.CurrentWorkingHours;
        if (currentWorkingHours is not null)
        {
            await WorkingHoursService.Edit(currentWorkingHours);
        }
    }

    async Task SaveRow(UserWithWorkingHoursDto userWithWorkingHours)
    {
        if (usersGrid is null)
        {
            // TODO: Log an error. Can't find user to save.
            return;
        }
        await usersGrid.UpdateRow(userWithWorkingHours);
    }

    void CancelEdit(UserWithWorkingHoursDto userWithWorkingHours)
    {
        if (userWithWorkingHours == userWithWorkingHoursToInsert)
        {
            userWithWorkingHoursToInsert = null;
        }

        userToUpdate = null;
        workingHoursToUpdate = null;

        usersGrid?.CancelEditRow(userWithWorkingHours);
    }

    async Task DeleteRow(UserWithWorkingHoursDto userWithWorkingHours)
    {
        var user = userWithWorkingHours.GetUser();
        if (user == userWithWorkingHoursToInsert)
        {
            userWithWorkingHoursToInsert = null;
        }

        if (user == userToUpdate)
        {
            userToUpdate = null;
        }

        if (users?.Contains(user) == true && user.Id is not null)
        {
            await UsersService.Delete(user.Id);

            if (usersGrid is null)
            {
                // TODO: Log an error. Can't find user to delete.
                return;
            }
            await usersGrid.Reload();
        }
        else
        {
            // TODO: Log an error. Can't find user to delete.
            if (usersGrid is null)
            {
                return;
            }
            usersGrid.CancelEditRow(userWithWorkingHours);
            await usersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        userWithWorkingHoursToInsert = new UserWithWorkingHoursDto();
        if (usersGrid is null)
        {
            // TODO: Log an error. Can't find user to delete.
            return;
        }
        await usersGrid.InsertRow(userWithWorkingHoursToInsert);
    }

    async Task OnCreateRow(UserWithWorkingHoursDto userWithWorkingHoursDto)
    {
        var userId = await UsersService.Create(userWithWorkingHoursDto);
        var firstDayOfYear = DateTimeOffset.UtcNow.GetFirstDayOfYear();
        userWithWorkingHoursDto.Id = userId;
        var workingHours = await WorkingHoursService.AddAndReturnDto(new AddWorkingHoursDto(userId, firstDayOfYear, null, WorkingHoursUtils.DefaultWorkingHours));
        if (workingHours is not null)
        {
            userWithWorkingHoursDto.WorkingHours = new List<WorkingHoursDto> { workingHours };
        }
        // TODO: Log an error. Can't find working hours
        userWithWorkingHoursToInsert = null;
    }
    
    string CurrentWorkingHoursToString(UserWithWorkingHoursDto workingHours)
    {
        var currentWorkingHours = workingHours.CurrentWorkingHours?.Duration;
        return currentWorkingHours is null ? "undefined" : currentWorkingHours.Value.GetReadableTimeSpan(TimeSpan.FromDays(1));
    }

    async Task ShowWorkingHoursDialog(string? userId)
    {
        if (userId.IsNullOrWhiteSpace())
        {
            ToastService.ShowError("Can not open the dialog");
            Logger.LogError("userId is null or white space");
            return;
        }
        await DialogService.OpenAsync<EditWorkingHoursDialog>("Edit workingHours",
            new Dictionary<string, object>
            {
                { "WorkingHours", workingHoursToUpdate.OrEmptyIfNull().ToList() },
                { "UserId", userId! }
            },
            new DialogOptions { Width = "800px", Resizable = true, Draggable = true });
    }

}