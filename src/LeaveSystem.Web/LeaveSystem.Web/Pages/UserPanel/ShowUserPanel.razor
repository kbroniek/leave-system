@page "/user-panel/{userId?}/{year:int?}"
@using LeaveSystem.Shared
@using LeaveSystem.Shared.LeaveRequests
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using LeaveSystem.Web.Pages.WorkingHours
@using Microsoft.AspNetCore.Authorization
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@attribute [Authorize(Policy = @PolicyName)]
@inject LeaveTypesService LeaveTypesService
@inject GetLeaveRequestsService GetLeaveRequestsService
@inject UserLeaveLimitsService UserLeaveLimitsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkingHoursService WorkingHoursService
@inject NavigationManager NavManager
@inject EmployeeService EmployeeService

<PageTitle>User panel @userName @Year</PageTitle>

<div class="container-flex">
    <div class="row">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="3rem" Class="rz-p-12">
            <RadzenText TextStyle="TextStyle.H5">Employee <strong>@userName</strong></RadzenText>
            <RadzenNumeric TValue="int?" Value=@Year Change=@(args => YearChanged(args))/>
        </RadzenStack>
    </div>
    <div class="row">
        <RadzenTabs RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Summary">
                    <UserPanelSummary UserSummaryCollection=@userSummaryCollection LeaveRequestsForView=@leaveRequestsForView Year=@Year/>
                </RadzenTabsItem>
                <RadzenTabsItem Text="By leave types">
                    <UserPanelLeaveTypes UserSummaryCollection=@userSummaryCollection/>
                </RadzenTabsItem>
                <AuthorizeView Policy="@LeaveLimitsPolicyName" Context="ShowUserPage">
                    <RadzenTabsItem Text="Leave Limits">
                        <UserPanelLeaveLimits @ref="limitsPanel"
                                              UserId="@UserId"
                                              Year="@Year"
                            LeaveTypesForView="@leaveTypesWithUserLimits" 
                            WorkingHours="workingHoursDuration"
                            RefreshLimitsCallback="ResetLimit"/>
                    </RadzenTabsItem>
                </AuthorizeView>

            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {

    [Parameter]
    public string? UserId { get; set; }

    [Parameter]
    public int? Year { get; set; }

        public const string PolicyName = "ShowUserPanel";
        public const string LeaveLimitsPolicyName = "ShowUserPanelLeaveLimits";
    private IEnumerable<LeaveRequestPerType>? userSummaryCollection;
    private IEnumerable<LeaveRequestForView>? leaveRequestsForView;
    private string? userName;
    private List<LeaveTypeForLimitsView>? leaveTypesWithUserLimits; 
    TimeSpan workingHoursDuration;
    UserPanelLeaveLimits? limitsPanel;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.CreateModel();
        if (UserId is null)
        {
            UserId = user.Id;
            userName = user.Name;
        }
        else
        {
            var userFromApi = await EmployeeService.Get(UserId);
            userName = userFromApi?.Name;
        }
        Year ??= DateTimeOffset.UtcNow.Year;
        var firstDay = DateTimeOffsetExtensions.GetFirstDayOfYear(Year.Value);
        var lastDay = DateTimeOffsetExtensions.GetLastDayOfYear(Year.Value);
        var query = new GetLeaveRequestsQuery(firstDay, lastDay, 1, 1000, Enum.GetValues<LeaveRequestStatus>())
        {
            CreatedByUserIds = new[] { UserId }
        };
        var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(query);
        var getLeaveTypesTask = LeaveTypesService.GetLeaveTypes();
        var getLimitsTask = UserLeaveLimitsService.GetAsync(UserId, firstDay, lastDay);
        var getWorkingHoursTask = WorkingHoursService.GetUserWorkingHours(UserId);
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask, getLimitsTask, getWorkingHoursTask);
        var leaveRequests = getLeaveRequestsTask.Result?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
        var leaveTypes = getLeaveTypesTask.Result.ToArray();
        var limits = getLimitsTask.Result;
        var workingHours = getWorkingHoursTask.Result;
        workingHoursDuration = workingHours?.Duration ?? TimeSpan.Zero;
        userSummaryCollection = leaveTypes.Select(lt => LeaveRequestPerType.Create(
            lt,
            leaveTypes,
            leaveRequests,
            limits,
            workingHoursDuration));
        leaveRequestsForView = leaveRequests
            .OrderBy(lr => lr.DateFrom)
            .Select(lr => LeaveRequestForView.Create(lr, leaveTypes, workingHoursDuration));
        leaveTypesWithUserLimits = leaveTypes.Select(lt =>
            LeaveTypeForLimitsView.Create(lt.Id, lt.Name, limits, lt.Properties, workingHoursDuration)).ToList();
    }

    async Task ResetLimit(Guid limitId)
    {
        var limitToReset = await UserLeaveLimitsService.GetAsync(limitId);
        if (limitToReset is not null)
        {
            limitsPanel?.UpdateLeaveLimit(limitToReset);
        }
    }

    private async Task<int?> YearChanged(int? year)
    {
        Year = year;
        NavManager.NavigateTo($"/user-panel/{UserId}/{year}");
        await OnInitializedAsync();
        limitsPanel?.GetDate();
        return year;
    }

}