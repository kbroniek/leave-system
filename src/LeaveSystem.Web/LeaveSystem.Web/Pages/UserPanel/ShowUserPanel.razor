@page "/user-panel/{userId?}/{year:int?}"
@using LeaveSystem.Shared
@using LeaveSystem.Shared.LeaveRequests
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using LeaveSystem.Web.Pages.WorkingHours
@using Microsoft.AspNetCore.Authorization
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@using LeaveSystem.Web.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using static LeaveSystem.Web.Pages.UserLeaveLimits.UserLeaveLimitsService
@attribute [Authorize(Policy=@PolicyName)]
@inject LeaveTypesService LeaveTypesService
@inject GetLeaveRequestsService GetLeaveRequestsService
@inject UserLeaveLimitsService UserLeaveLimitsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkingHoursService WorkingHoursService
@inject NavigationManager NavManager
@inject EmployeeService EmployeeService

<PageTitle>User panel @userName @Year</PageTitle>

<div class="container-flex">
    <div class="row">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="3rem" Class="rz-p-12">
            <RadzenText TextStyle="TextStyle.H5">Employee <strong>@userName</strong></RadzenText>
            <RadzenNumeric TValue="int?" Value=@Year Change=@(args => YearChanged(args)) />
        </RadzenStack>
    </div>
    <div class="row">
        <RadzenTabs RenderMode="TabRenderMode.Client" >
            <Tabs>
                <RadzenTabsItem Text="Summary">
                    <UserPanelSummary UserSummaryCollection=@userSummaryCollection LeaveRequestsForView=@leaveRequestsForView Year=@Year />
                </RadzenTabsItem>
                <RadzenTabsItem Text="By leave types">
                    <UserPanelLeaveTypes UserSummaryCollection=@userSummaryCollection />
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {
    [Parameter]
    public string? UserId { get; set; }
    [Parameter]
    public int? Year { get; set; }
    public const string PolicyName = "ShowUserPanel";
    private IEnumerable<LeaveRequestPerType>? userSummaryCollection;
    private IEnumerable<LeaveRequestForView>? leaveRequestsForView;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.CreateModel();
        if (UserId is null)
        {
            UserId = user.Id;
            userName = user.Name;
        }
        else
        {
            var userFromApi = await EmployeeService.Get(UserId);
            userName = userFromApi?.Name;
        }
        if (Year is null)
        {
            Year = DateTimeOffset.UtcNow.Year;
        }
        var firstDay = DateTimeOffsetExtensions.GetFirstDayOfYear(Year.Value);
        var lastDay = DateTimeOffsetExtensions.GetLastDayOfYear(Year.Value);
        var query = new GetLeaveRequestsQuery(firstDay, lastDay, 1, 1000, Enum.GetValues<LeaveRequestStatus>())
        {
                CreatedByUserIds = new string[] { UserId }
        };
        var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(query);
        var getLeaveTypesTask = LeaveTypesService.GetLeaveTypes();
        var getLimitsTask = UserLeaveLimitsService.GetLimits(user.Id);
        var getWorkingHoursTask = WorkingHoursService.GetUserWorkingHours(user.Id, firstDay, lastDay);
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask, getLimitsTask, getWorkingHoursTask);
        var leaveRequests = getLeaveRequestsTask.Result?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
        var leaveTypes = getLeaveTypesTask.Result ?? Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
        var limits = getLimitsTask.Result ?? Enumerable.Empty<UserLeaveLimitsService.UserLeaveLimitDto>();
        var workingHours = getWorkingHoursTask.Result;
        var workingHoursDuration = workingHours.GetDuration();
        userSummaryCollection = leaveTypes.Select(lt => LeaveRequestPerType.Create(
            lt,
            leaveRequests,
            limits,
            workingHoursDuration));
        leaveRequestsForView = leaveRequests
            .OrderBy(lr => lr.DateFrom)
            .Select(lr => LeaveRequestForView.Create(lr, leaveTypes, workingHoursDuration));
    }
    private async Task<int?> YearChanged(int? year)
    {
        Year = year;
        NavManager.NavigateTo($"/user-panel/{UserId}/{year}");
        await OnInitializedAsync();
        return year;
    }
}
