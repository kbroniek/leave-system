@page "/user-panel/{year:int?}"
@using LeaveSystem.Shared
@using LeaveSystem.Shared.LeaveRequests
@using LeaveSystem.Web.Pages.UserLeaveLimits
@using LeaveSystem.Web.Pages.WorkingHours
@using Microsoft.AspNetCore.Authorization
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Web.Pages.LeaveRequests.ShowingLeaveRequests
@using LeaveSystem.Web.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using static LeaveSystem.Web.Pages.UserLeaveLimits.UserLeaveLimitsService
@attribute [Authorize(Policy=@PolicyName)]
@inject LeaveTypesService LeaveTypesService
@inject GetLeaveRequestsService GetLeaveRequestsService
@inject UserLeaveLimitsService UserLeaveLimitsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkingHoursService WorkingHoursService

<PageTitle>User panel</PageTitle>

<div class="container-flex">
    <RadzenTabs RenderMode="TabRenderMode.Client" >
        <Tabs>
            <RadzenTabsItem Text="Summary">
                <div class="row">
                    <div class="col-lg-4">
                        <RadzenText TextStyle="TextStyle.H5">Additional information</RadzenText>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> The number of days for the year @Year: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Number of days for previous years: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Available days: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Used days: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> On-demand: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Free saturday: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Inability to work due to illness: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Occasional holidays: </RadzenText>
							<RadzenText class="col-sm-4">26d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Parental leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Maternity leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Care for a child up to 14 years old: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Family leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Paternity leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Caring for a child or other family member: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Unexcused absences: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Paid excused absence: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Unpaid leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Training leave: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                        <div class="row">
							<RadzenText class="col-sm-8"> Overtime: </RadzenText>
							<RadzenText class="col-sm-4">0d </RadzenText>
						</div>
                        <hr />
                    </div>
                    <div class="col-lg-8">
                        <RadzenText TextStyle="TextStyle.H5">My leave requests</RadzenText>
                        <hr />
                        <RadzenDataGrid ColumnWidth="150px" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@leaveRequestsForView" TItem="LeaveRequestForView">
                            <Columns>
                                <RadzenDataGridColumn TItem="LeaveRequestForView" Property="DateFrom" Title="Date from" FormatString="{0:d}" />
                                <RadzenDataGridColumn TItem="LeaveRequestForView" Property="DateTo" Title="Date to" FormatString="{0:d}" />
                                <RadzenDataGridColumn TItem="LeaveRequestForView" Property="Duration" Title="Duration" />
                                <RadzenDataGridColumn TItem="LeaveRequestForView" Property="LeaveTypeName" Title="LeaveType" />
                                <RadzenDataGridColumn TItem="LeaveRequestForView" Property="Status" Title="Status" />
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text="By leave types">
                <UserPanelLeaveTypes UserSummaryCollection=@userSummaryCollection />
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    [Parameter]
    public int? Year { get; set; }
    public const string PolicyName = "ShowUserPanel";
    private IEnumerable<LeaveRequestPerType>? userSummaryCollection;
    private IEnumerable<LeaveRequestForView>? leaveRequestsForView;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.CreateModel();
        if(Year is null)
        {
            Year = DateTimeOffset.UtcNow.Year;
        }
        var firstDay = DateTimeOffsetExtensions.GetFirstDayOfYear(Year.Value);
        var lastDay = DateTimeOffsetExtensions.GetLastDayOfYear(Year.Value);
        var query = new GetLeaveRequestsQuery(firstDay, lastDay, 1, 1000, Enum.GetValues<LeaveRequestStatus>())
        {
            CreatedByUserIds = new string[] { user.Id }
        };
        var getLeaveRequestsTask = GetLeaveRequestsService.GetLeaveRequests(query);
        var getLeaveTypesTask = LeaveTypesService.GetLeaveTypes();
        var getLimitsTask = UserLeaveLimitsService.GetLimits(user.Id);
        var getWorkingHoursTask = WorkingHoursService.GetUserWorkingHours(user.Id, firstDay, lastDay);
        await Task.WhenAll(getLeaveRequestsTask, getLeaveTypesTask, getLimitsTask, getWorkingHoursTask);
        var leaveRequests = getLeaveRequestsTask.Result?.Items ?? Enumerable.Empty<LeaveRequestShortInfo>();
        var leaveTypes = getLeaveTypesTask.Result ?? Enumerable.Empty<LeaveTypesService.LeaveTypeDto>();
        var limits = getLimitsTask.Result ?? Enumerable.Empty<UserLeaveLimitsService.UserLeaveLimitDto>();
        var workingHours = getWorkingHoursTask.Result;
        var workingHoursDuration = workingHours.GetDuration();
        userSummaryCollection = leaveTypes.Select(lt => LeaveRequestPerType.Create(
            lt,
            leaveRequests,
            limits,
            workingHoursDuration));
        leaveRequestsForView = leaveRequests
            .OrderBy(lr => lr.DateFrom)
            .Select(lr => LeaveRequestForView.Create(lr, leaveTypes, workingHoursDuration));
    }
}
