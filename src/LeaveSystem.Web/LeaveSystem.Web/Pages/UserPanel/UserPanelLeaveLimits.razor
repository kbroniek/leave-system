@using LeaveSystem.Web.Pages.UserLeaveLimits
@using LeaveSystem.Web.Extensions
@using LeaveSystem.Web.Pages.LeaveTypes
@using LeaveSystem.Shared.UserLeaveLimits
@using LeaveSystem.Shared
@using System.Text.Json

@inject IToastService ToastService
@inject ILogger<UserPanelLeaveLimits> Logger
@inject UserLeaveLimitsService LimitsService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (UserId is not null)
{
    <RadzenDataGrid @ref="leaveTypeGrid" AllowFiltering="true" AllowSorting="true" ExpandMode="DataGridExpandMode.Single"
                    Data="@LeaveTypesForView" TItem="LeaveTypeForLimitsView">
        <Template Context="leaveType">
            <RadzenButton
                ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Limit"
                Click="@(() => InsertRow(leaveType.Id))" Disabled=@(limitToInsert is not null || editingLimits)/>
            <RadzenDataGrid @ref="limitsGrid" AllowFiltering="true" AllowPaging="true" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow"
                            AllowSorting="true" Data="@leaveType.Limits" TItem="UserLeaveLimitDto" EditMode="DataGridEditMode.Single">
                <Columns>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.ValidSince" Title="Valid Since">
                        <Template Context="limit">
                            @limit.ValidSince.GetReadableDate()
                        </Template>
                        <EditTemplate Context="limit">
                            <RadzenDatePicker
                                @bind-Value="limit.ValidSince"
                                Min="firstDayOfYear" Max="lastDayOfYear"
                                DateFormat="yyyy/MM/dd">
                            </RadzenDatePicker>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.ValidUntil" Title="Valid Until">
                        <Template Context="limit">
                            @limit.ValidUntil.GetReadableDate()
                        </Template>
                        <EditTemplate Context="limit">
                            <RadzenDatePicker
                                @bind-Value="limit.ValidUntil"
                                Min="firstDayOfYear" Max="lastDayOfYear"
                                DateFormat="yyyy/MM/dd">
                            </RadzenDatePicker>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.Limit" Title="Limit">
                        <Template Context="limit">
                            @limit.Limit.GetReadableTimeSpan(WorkingHours)
                        </Template>
                        <EditTemplate Context="limit">
                            <RadzenNumeric TValue="int" Value="limit.Limit.GetDurationDays(WorkingHours)"
                                           Change="x => limit.Limit = DurationExtensions.GetDurationFromDays(x, WorkingHours)"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.OverdueLimit" Title="Overdue Limit">
                        <Template Context="limit">
                            @limit.OverdueLimit.GetReadableTimeSpan(WorkingHours)
                        </Template>
                        <EditTemplate Context="limit">
                            <RadzenNumeric TValue="int" Value="limit.OverdueLimit.GetDurationDays(WorkingHours)"
                                           Change="x => limit.OverdueLimit = DurationExtensions.GetDurationFromDays(x, WorkingHours)"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.TotalLimit" Title="Total Limit">
                        <Template Context="limit">
                            @limit.TotalLimit.GetReadableTimeSpan(WorkingHours)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Property="UserLeaveLimitDto.Property.Description" Title="Description">
                        <Template Context="limit">
                            @limit.Property.Description
                        </Template>
                        <EditTemplate Context="limit">
                            <RadzenTextArea @bind-Value="limit.Property.Description"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserLeaveLimitDto" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="data">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(data))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                          Icon="delete" Variant="Variant.Flat"
                                          Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@(args => DeleteRow(data))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="data">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                                          Size="ButtonSize.Medium" Click="@((args) => SaveRow(data))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                          Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(data))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="LeaveTypeForLimitsView" Title="Name">
                <Template Context="leaveType">
                    @leaveType.Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LeaveTypeForLimitsView" Title="Limit">
                <Template Context="leaveType">
                    @leaveType.Limit
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LeaveTypeForLimitsView" Title="Overdue Limit">
                <Template Context="leaveType">
                    @leaveType.OverdueLimit
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LeaveTypeForLimitsView" Title="Total Limit">
                <Template Context="leaveType">
                    @leaveType.TotalLimit
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LeaveTypeForLimitsView">
                <Template Context="leaveType">
                    <div style="@GetCssStyleForLeaveType(leaveType.Properties.Color)"></div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="d-flex justify-content-center">
        <RadzenText TextStyle="TextStyle.H1">Error occured while displaying leave limits</RadzenText>
    </div>
}

@code {

    [Parameter] public List<LeaveTypeForLimitsView>? LeaveTypesForView { get; set; }

    [Parameter] public TimeSpan WorkingHours { get; set; }

    [Parameter] public EventCallback<Guid> RefreshLimitsCallback { get; set; }

    [Parameter] public string? UserId { get; set; }

    [Parameter] public int? Year { get; set; }

    RadzenDataGrid<LeaveTypeForLimitsView>? leaveTypeGrid;
    RadzenDataGrid<UserLeaveLimitDto>? limitsGrid;
    private DateTime firstDayOfYear;
    private DateTime lastDayOfYear;

    bool editingLimits = false;
    UserLeaveLimitDto? limitToInsert;

    protected override void OnInitialized()
    {
        GetDate();
    }

    public void GetDate()
    {
        var currentYear = Year ?? DateTimeOffset.UtcNow.Year;
        firstDayOfYear = new DateTime(currentYear, 1, 1, 0, 0, 0);
        lastDayOfYear = new DateTime(currentYear, 12, 31, 23, 59, 59, 999);
    }

    string GetCssStyleForLeaveType(string? leaveTypeColor) => $"background-color: {leaveTypeColor}; width: 30px;";

    async Task EditRow(UserLeaveLimitDto limit)
    {
        editingLimits = true;
        if (limitsGrid is null)
        {
            ToastService.ShowError("Error occured during entering edition mode!");
            Logger.LogError("workingHoursGrid is null");
            editingLimits = false;
            return;
        }

        await limitsGrid.EditRow(limit);
    }

    async Task SaveRow(UserLeaveLimitDto limit)
    {
        if (limitsGrid is null)
        {
            ToastService.ShowError("Error occured during saving working hours!");
            Logger.LogError("workingHoursGrid is null");
            return;
        }

        await limitsGrid.UpdateRow(limit);
    }

    async Task CancelEdit(UserLeaveLimitDto limit)
    {
        if (limit == limitToInsert)
        {
            limitToInsert = null;
        }
        else
        {
            await ResetOne(limit.Id);
        }

        limitsGrid?.CancelEditRow(limit);
        editingLimits = false;
    }

    public void UpdateLeaveLimit(UserLeaveLimitDto limit)
    {
        var limitToChange = LeaveTypesForView?
            .FirstOrDefault(lt => lt.Id == limit.LeaveTypeId)?
            .Limits.FirstOrDefault(ull => ull.Id == limit.Id);
        if (limitToChange is null)
        {
            return;
        }

        limitToChange.OverdueLimit = limit.OverdueLimit;
        limitToChange.Limit = limit.Limit;
        limitToChange.ValidSince = limit.ValidSince;
        limitToChange.ValidUntil = limit.ValidUntil;
    }

    async Task ResetOne(Guid limitId)
    {
        await RefreshLimitsCallback.InvokeAsync(limitId);
    }

    async Task InsertRow(Guid leaveTypeId)
    {
        limitToInsert = new()
        {
            LeaveTypeId = leaveTypeId,
            ValidSince = firstDayOfYear,
            ValidUntil = lastDayOfYear
        };
        if (limitsGrid is null)
        {
            ToastService.ShowError("Error occured during inserting row!");
            Logger.LogError("limitsGrid is null");
            return;
        }

        await limitsGrid.InsertRow(limitToInsert);
    }

    async Task OnUpdateRow(UserLeaveLimitDto limit)
    {
        if (limit == limitToInsert)
        {
            limitToInsert = null;
        }

        var editLimitResult = await LimitsService.EditAsync(limit);
        if (!editLimitResult)
        {
            var limitToSet = await LimitsService.GetAsync(limit.Id);
            if (limitToSet is not null)
            {
                limit.Limit = limitToSet.Limit;
                limit.OverdueLimit = limitToSet.OverdueLimit;
                limit.ValidSince = limitToSet.ValidSince;
                limit.ValidUntil = limitToSet.ValidUntil;
                limit.Property = limitToSet.Property;
            }
        }
        limitToInsert = null;
        editingLimits = false;
    }

    async Task OnCreateRow(UserLeaveLimitDto limit)
    {
        var addDto = new AddUserLeaveLimitDto()
        {
            Limit = limit.Limit,
            OverdueLimit = limit.OverdueLimit,
            Property = new()
            {
                Description = limit.Property?.Description
            },
            AssignedToUserId = UserId,
            LeaveTypeId = limit.LeaveTypeId,
            ValidSince = limit.ValidSince,
            ValidUntil = limit.ValidUntil
        };
        var addedLimit = await LimitsService.AddAsync(addDto);
        if (addedLimit is not null)
        {
            limit.Id = addedLimit.Id;
            LeaveTypesForView?.FirstOrDefault(x => x.Id == limit.LeaveTypeId)?.Limits.Add(limit);
        }
        else
        {
            limitsGrid?.CancelEditRow(limit);
        }

        limitToInsert = null;
    }

    private async Task DeleteRow(UserLeaveLimitDto limit)
    {
        if (limit == limitToInsert)
        {
            limitToInsert = null;
        }
        if (LeaveTypesForView?.Any(lt => lt.Limits.Any(ull => ull.Id == limit.Id)) == true)
        {
            var deletedLimitSuccessfully = await LimitsService.DeleteAsync(limit.Id);
            if (!deletedLimitSuccessfully) {return;}
            LeaveTypesForView.FirstOrDefault(lt => lt.Id == limit.LeaveTypeId)?.Limits.Remove(limit);
            if (limitsGrid is null)
            {
                return;
            }
            await limitsGrid.Reload();
            return;
        }
        if (limitsGrid is null)
        {
            return;
        }
        limitsGrid.CancelEditRow(limit);
        await limitsGrid.Reload();
    }

}
