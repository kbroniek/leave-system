@page "/createleaverequest"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<CreateLeaveRequest> Logger

<PageTitle>Add leave request</PageTitle>

<h1>Add leave request</h1>

<EditForm Model="@leaveRequest" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <p>
        <label>
            Date from:
            <InputDate @bind-Value="leaveRequest.DateFrom" />
        </label>
    </p>
    <p>
        <label>
            Date from:
            <InputDate @bind-Value="leaveRequest.DateTo" />
        </label>
    </p>
    <p>
        <label>
            Hours:
            <InputNumber @bind-Value="leaveRequest.Hours" />
        </label>
    </p>
    <p>
        <label>
            Leave type:
            <InputSelect @bind-Value="leaveRequest.LeaveTypeId" >
                <option value="">Select leave type ...</option>
                @foreach (var leaveType in leaveTypes)
                {
                    <option value="@leaveType.LeaveTypeId">@leaveType.Name</option>
                }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Remarks (optional):
            <InputTextArea @bind-Value="leaveRequest.Remarks" />
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>

@code {
    private CreateLeaveRequestDto leaveRequest = new() { DateFrom = DateTime.UtcNow, DateTo = DateTime.UtcNow };
    private EditContext? editContext;
    private IEnumerable<LeaveType> leaveTypes = Enumerable.Empty<LeaveType>();

    protected override void OnInitialized()
    {
        editContext = new(leaveRequest);
    }
    protected override async Task OnInitializedAsync()
    {
        leaveTypes = await LoadLeaveTypes();
    }
    private async Task HandleSubmit()
    {
        if (editContext != null && editContext.Validate())
        {
            Logger.LogInformation("[HandleSubmit]: Form is valid");
            try
            {
                await Http.PostAsJsonAsync("api/createLeaveRequest", leaveRequest);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                Logger.LogError(exception, "AccessTokenNotAvailableException");
                exception.Redirect();
            }
        }
        else
        {
            Logger.LogTrace("[HandleSubmit]: Form is INVALID");
        }
    }
    private async ValueTask<IEnumerable<LeaveType>> LoadLeaveTypes()
    {
        Logger.LogInformation("Get all leave types");
        var leaveRequests = await Http.GetFromJsonAsync<IEnumerable<LeaveType>>("api/LeaveType");

        if (leaveRequests == null)
        {
            throw new InvalidOperationException("The collection leaveRequests is empty.");
        }

        return leaveRequests;
    }

    private class LeaveType
    {
        public Guid LeaveTypeId { get; set; }
        public string? Name { get; set; }
    }
}


